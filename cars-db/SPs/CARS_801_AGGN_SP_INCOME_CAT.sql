DROP PROCEDURE IF EXISTS CARS_801_AGGN_SP_INCOME_CAT;
DELIMITER $$

CREATE PROCEDURE CARS_801_AGGN_SP_INCOME_CAT( IN i_aggn_ref_id INT)
BEGIN
/******************************************************
 * Author: Zohreh Torabian
 * Report Name: Count of Families By Income Category
 * Report Number: 511
 * Report Name: Percent of Families By Income Category
 * Report Number: 512
 * Desc: It populates data for table, 
 *		 CARS_801_AGGN_INCOME_CAT.
 ******************************************************/

DECLARE v_rec_cnt INTEGER DEFAULT 0 ;
DECLARE v_total_rows_deleted INTEGER DEFAULT 0; 
DECLARE v_total_rows_inserted INTEGER DEFAULT 0;
/* DECLARE st_time TIME; */
 
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
			SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
			 
			UPDATE CARS_801_SP_LOG
				SET SP_STATUS_TEXT='Error',SP_LOG_MESSAGE_TEXT=@full_error,END_TS=NOW()
			WHERE SP_LOG_ID=(SELECT MAX(SP_LOG_ID)FROM CARS_801_SP_LOG WHERE SP_NAME='CARS_801_AGGN_SP_INCOME_CAT' );
			COMMIT;
		END;	
		/* SET st_time =NOW(); */
		INSERT INTO CARS_801_SP_LOG ( SP_NAME,  START_TS)
		VALUES( 'CARS_801_AGGN_SP_INCOME_CAT',  NOW());	
		
		
		SELECT COUNT(*) INTO v_rec_cnt FROM CARS_801_AGGN_INCOME_CAT WHERE  AGGN_REF_ID = i_aggn_ref_id;
 
		DELETE FROM CARS_801_AGGN_INCOME_CAT
		WHERE AGGN_REF_ID = i_aggn_ref_id;
        
		SET v_total_rows_deleted = ROW_COUNT();



DROP TEMPORARY TABLE IF EXISTS TMP_MOD_HDR_M;
CREATE TEMPORARY TABLE TMP_MOD_HDR_M AS
				    SELECT 	DISTINCT HDR.MODULE_HDR_ID 
						   
						   ,AGGN_REF_ID
						   ,HDR.ENTITY_ID
						   ,HDR.ENTITY_NAME	
						   ,HDR.FAMILY_COUNT AS FAM_MO_UNADJ_CNT
						   ,REC.FAMILY_COUNT AS FAMILY_CNT
						   ,AGGN_RF.FISCAL_YEAR 
							FROM CARS_MODULE_PERIOD_HDR HDR 
								JOIN CARS_PERIOD P 
							ON P.PERIOD_ID=HDR.PERIOD_ID 
							AND P.801_FLAG = 1
								JOIN CARS_801_REC_COUNTS REC
							ON REC.MODULE_HDR_ID=HDR.MODULE_HDR_ID
								JOIN CARS_801_AGGN_REF AGGN_RF 
							ON CAST(SUBSTR(P.PERIOD_DESC,5,4) AS INTEGER) =AGGN_RF.FISCAL_YEAR
							AND AGGN_RF.AGGN_REF_ID= i_aggn_ref_id;
						
DROP TEMPORARY TABLE IF EXISTS TMP_FAMILY_HDR;
CREATE TEMPORARY TABLE TMP_FAMILY_HDR AS

     SELECT HDR.MODULE_HDR_ID
		   ,HDR.ENTITY_ID
		   ,HDR.ENTITY_NAME
		   ,HDR.FISCAL_YEAR
		   ,HDR.FAM_MO_UNADJ_CNT
		   ,HDR.FAMILY_CNT
		   ,FAM.FAMILY_ID
		   ,FAM.MONTHLY_INCOME
		   ,FAM.REASON_CD
		   ,FAM.TOTAL_MONTHLY_COPAYMENT
		
		FROM CARS_801_FAMILY  FAM
		
			JOIN  TMP_MOD_HDR_M HDR
		ON HDR.MODULE_HDR_ID=FAM.MODULE_HDR_ID;
       
      
     	DROP TEMPORARY TABLE IF EXISTS TMP_FAMILY_HDR_MED;
		CREATE TEMPORARY TABLE TMP_FAMILY_HDR_MED AS
		SELECT 
								 MODULE_HDR_ID
								,ENTITY_NAME
								,MONTHLY_INCOME
								,FISCAL_YEAR
								FROM TMP_FAMILY_HDR 
								WHERE
									REASON_CD NOT IN (4,9)
									AND REASON_CD IS NOT NULL
									AND TOTAL_MONTHLY_COPAYMENT <= MONTHLY_INCOME
								ORDER BY MONTHLY_INCOME ;
								
								
		DROP INDEX IF EXISTS FAM_HDR_IDX ON TMP_FAMILY_HDR ;
		CREATE INDEX IF NOT EXISTS FAM_HDR_IDX ON TMP_FAMILY_HDR(ENTITY_NAME,MONTHLY_INCOME,TOTAL_MONTHLY_COPAYMENT, MODULE_HDR_ID,REASON_CD );
		
		DROP TEMPORARY TABLE IF EXISTS TMP_FAMILY_RATIO;
		CREATE TEMPORARY TABLE TMP_FAMILY_RATIO AS
		SELECT 
        
		 INC.MODULE_HDR_ID
		,INC.ENTITY_NAME
		,INC.FISCAL_YEAR
		,MEAN_ZERO.INC0_RAT 0_RATIO
		,INC.1_500_RATIO
		,INC.501_1000_RATIO
		,INC.1001_2000_RATIO
		,INC.2001_2500_RATIO
		,INC.2500_RATIO
		,PRO_SVC.PRO_SVC_RATIO 
		
		,(1-(IFNULL(PRO_SVC.PRO_SVC_RATIO,0)
		+IFNULL(MEAN_ZERO_G.INC_TOT_RAT,0)
		+ IFNULL(MEAN_ZERO.INC0_RAT,0) )) INVALID_RATIO
		,CASE WHEN (IFNULL(MEAN_ZERO.INC0,0)+IFNULL(MEAN_ZERO_G.INC_TOT,0))=0 THEN 0 ELSE  (MEAN_ZERO_EG.MEAN_0_RAT/(IFNULL(MEAN_ZERO.INC0,0)+IFNULL(MEAN_ZERO_G.INC_TOT,0))) END AS MEAN_0_AVG
        ,CASE WHEN MEAN_ZERO_G.INC_TOT=0 THEN 0 ELSE MEAN_ZERO_EG.MEAN_0_RAT/MEAN_ZERO_G.INC_TOT END AS MEAN_NO0_AVG
		,MEDIAN_0_T.MEDIAN_0_AVG
		,MEDIAN_NO0_T.MEDIAN_NO0_AVG
		
		FROM 
		(
			SELECT  MODULE_HDR_ID
				   ,ENTITY_NAME
				   ,FISCAL_YEAR
				 
				   ,COUNT(CASE WHEN MONTHLY_INCOME BETWEEN 1 AND 500 THEN 1 END )		/FAMILY_CNT AS 1_500_RATIO 
				   ,COUNT(CASE WHEN MONTHLY_INCOME BETWEEN 501 AND 1000 THEN 1 END )	/FAMILY_CNT AS 501_1000_RATIO
				   ,COUNT(CASE WHEN MONTHLY_INCOME BETWEEN 1001 AND 2000 THEN 1 END )	/FAMILY_CNT AS 1001_2000_RATIO
				   ,COUNT(CASE WHEN MONTHLY_INCOME BETWEEN 2001 AND 2500 THEN 1 END )	/FAMILY_CNT AS 2001_2500_RATIO
				   ,COUNT(CASE WHEN MONTHLY_INCOME>2500 THEN 1 END )    				/FAMILY_CNT AS 2500_RATIO
			FROM TMP_FAMILY_HDR	
			WHERE  
					REASON_CD IS NOT NULL 
					AND TOTAL_MONTHLY_COPAYMENT IS NOT NULL 
					AND MONTHLY_INCOME >=1 AND MONTHLY_INCOME IS NOT NULL
					AND REASON_CD NOT IN (4,9)
			   
			GROUP BY 1,2,3						
		) INC  
	LEFT JOIN ( SELECT  MODULE_HDR_ID
					,ENTITY_NAME
							
					,CASE WHEN FAMILY_CNT=0 THEN 0 ELSE COUNT(1)/FAMILY_CNT END AS PRO_SVC_RATIO 
					FROM TMP_FAMILY_HDR FAM_HDR
								
					WHERE 
                   
                    REASON_CD IN (4,9) 
                  
						
													
					GROUP BY 1,2
				) PRO_SVC
		
		ON INC.MODULE_HDR_ID=PRO_SVC.MODULE_HDR_ID
		AND INC.ENTITY_NAME=PRO_SVC.ENTITY_NAME
        LEFT JOIN ( 
						SELECT 
							MODULE_HDR_ID 
							,ENTITY_NAME
							
						,COUNT(1) AS INC0
						,CASE WHEN FAMILY_CNT=0 THEN 0 ELSE COUNT(1)/FAMILY_CNT END AS INC0_RAT
						FROM TMP_FAMILY_HDR	
						WHERE 
						REASON_CD NOT IN (4,9)
							AND REASON_CD IS NOT NULL 
						AND	MONTHLY_INCOME = 0
						AND TOTAL_MONTHLY_COPAYMENT <= MONTHLY_INCOME 
						AND TOTAL_MONTHLY_COPAYMENT IS NOT NULL 
						AND MONTHLY_INCOME IS NOT NULL 			
						GROUP BY 1,2
				   ) MEAN_ZERO
		ON INC.MODULE_HDR_ID=MEAN_ZERO.MODULE_HDR_ID
		AND INC.ENTITY_NAME=MEAN_ZERO.ENTITY_NAME
        
		LEFT JOIN ( SELECT 
							MODULE_HDR_ID 
							,ENTITY_NAME
							
							 ,COUNT(1) AS INC_TOT 
							,CASE WHEN FAMILY_CNT=0 THEN 0 ELSE COUNT(1)/FAMILY_CNT END AS INC_TOT_RAT
					FROM  TMP_FAMILY_HDR  
					WHERE 
					    REASON_CD NOT IN (4,9) 
						AND REASON_CD IS NOT NULL 
						AND  MONTHLY_INCOME > 0
						AND TOTAL_MONTHLY_COPAYMENT <= MONTHLY_INCOME 
						AND TOTAL_MONTHLY_COPAYMENT IS NOT NULL 
						AND MONTHLY_INCOME IS NOT NULL 
						GROUP BY 1,2
				   ) MEAN_ZERO_G
                   
		ON INC.MODULE_HDR_ID=MEAN_ZERO_G.MODULE_HDR_ID
		AND INC.ENTITY_NAME=MEAN_ZERO_G.ENTITY_NAME
        LEFT JOIN ( SELECT 
						MODULE_HDR_ID 
						,ENTITY_NAME
						
						,SUM(IFNULL(MONTHLY_INCOME,0)) AS MEAN_0_RAT
						FROM TMP_FAMILY_HDR_MED 
						WHERE MONTHLY_INCOME >= 0
						
						GROUP BY 1,2
					) MEAN_ZERO_EG
		ON INC.MODULE_HDR_ID=MEAN_ZERO_EG.MODULE_HDR_ID
		AND INC.ENTITY_NAME=MEAN_ZERO_EG.ENTITY_NAME
        LEFT JOIN (  SELECT 
									 TF.MODULE_HDR_ID
									,TF.ENTITY_NAME
									
									,ROUND(AVG(MED_ZERO_M.MONTHLY_INCOME),2) MEDIAN_0_AVG
									   
										FROM (   
												SELECT 
												 MODULE_HDR_ID
												,ENTITY_NAME
												,MONTHLY_INCOME
												,FISCAL_YEAR
												,ROW_NUMBER() OVER ( PARTITION BY MODULE_HDR_ID,ENTITY_NAME ORDER BY MONTHLY_INCOME) RN
												FROM TMP_FAMILY_HDR_MED
												WHERE MONTHLY_INCOME IS NOT NULL 
													AND MONTHLY_INCOME >= 0
												
											   ) MED_ZERO_M  
								
											 JOIN ( SELECT MODULE_HDR_ID
												,ENTITY_NAME, FLOOR(COUNT(1)/2+ .50) F_CNT , CEIL(COUNT(1)/2+ .50)  CE_CNT 
												FROM TMP_FAMILY_HDR_MED 
												WHERE MONTHLY_INCOME >= 0 
												GROUP BY 1,2
											  ) TF
											ON TF.MODULE_HDR_ID=MED_ZERO_M.MODULE_HDR_ID	
											AND TF.ENTITY_NAME=MED_ZERO_M.ENTITY_NAME
											AND MED_ZERO_M.RN BETWEEN TF.F_CNT AND TF.CE_CNT
										 
									  GROUP BY 1,2 
				) MEDIAN_0_T
		ON INC.MODULE_HDR_ID= MEDIAN_0_T.MODULE_HDR_ID
		AND INC.ENTITY_NAME=MEDIAN_0_T.ENTITY_NAME
		LEFT JOIN (  SELECT 
									 TF.MODULE_HDR_ID
									,TF.ENTITY_NAME
									
									,ROUND(AVG(MED_M.MONTHLY_INCOME),2) MEDIAN_NO0_AVG
									   
										FROM (   
												SELECT 
												 MODULE_HDR_ID
												,ENTITY_NAME
												,MONTHLY_INCOME
												,FISCAL_YEAR
												,ROW_NUMBER() OVER ( PARTITION BY MODULE_HDR_ID,ENTITY_NAME ORDER BY MONTHLY_INCOME) RN
												FROM TMP_FAMILY_HDR_MED
												WHERE MONTHLY_INCOME IS NOT NULL 
													AND MONTHLY_INCOME > 0
												
											   ) MED_M  
								
											 JOIN ( SELECT MODULE_HDR_ID
												,ENTITY_NAME, FLOOR(COUNT(1)/2+ .50) F_CNT , CEIL(COUNT(1)/2+ .50)  CE_CNT 
												FROM TMP_FAMILY_HDR_MED 
												WHERE MONTHLY_INCOME > 0 
												GROUP BY 1,2
											  ) TF
											ON TF.MODULE_HDR_ID=MED_M.MODULE_HDR_ID	
											AND TF.ENTITY_NAME=MED_M.ENTITY_NAME
											AND MED_M.RN BETWEEN TF.F_CNT AND TF.CE_CNT
										 
									  GROUP BY 1,2 
				) MEDIAN_NO0_T
		ON  INC.MODULE_HDR_ID =MEDIAN_NO0_T.MODULE_HDR_ID
		AND INC.ENTITY_NAME=MEDIAN_NO0_T.ENTITY_NAME;
        
      DROP INDEX IF EXISTS FAM_RAT_IDX ON TMP_FAMILY_RATIO ;
		CREATE INDEX IF NOT EXISTS FAM_RAT_IDX ON TMP_FAMILY_RATIO (ENTITY_NAME,MODULE_HDR_ID);
		
		
		DROP TEMPORARY TABLE IF EXISTS CARS_801_TEMP_INCOME_CAT_CAL;
		CREATE TEMPORARY TABLE CARS_801_TEMP_INCOME_CAT_CAL
						SELECT 
							
							A.ENTITY_NAME
							,A.FISCAL_YEAR
							,AVG(FAM_MO_UNADJ_CNT)															AVGMOSTATE																		
							,AVG(IFNULL(0_RATIO,0)*FAM_MO_UNADJ_CNT )										0_AVG
							,AVG(IFNULL(1_500_RATIO,0)*FAM_MO_UNADJ_CNT)									1_500AVG
							,AVG(IFNULL(501_1000_RATIO,0)*FAM_MO_UNADJ_CNT)									501_1000AVG
							,AVG(IFNULL(1001_2000_RATIO,0)*FAM_MO_UNADJ_CNT)								1001_2000AVG
							,AVG(IFNULL(2001_2500_RATIO,0)*FAM_MO_UNADJ_CNT)								2001_2500AVG
							,AVG(IFNULL(2500_RATIO,0)*FAM_MO_UNADJ_CNT)										2500_AVG 
							,AVG(IFNULL(PRO_SVC_RATIO,0)*FAM_MO_UNADJ_CNT)									PRO_SVCAVG 
							,AVG(IFNULL(INVALID_RATIO,0)*FAM_MO_UNADJ_CNT)    								INVALID_AVG
							,SUM(IFNULL(0_RATIO,0)*FAM_MO_UNADJ_CNT )										0_SUM
							,SUM(IFNULL(1_500_RATIO,0)*FAM_MO_UNADJ_CNT)									1_500SUM
							,SUM(IFNULL(501_1000_RATIO,0)*FAM_MO_UNADJ_CNT)									501_1000SUM
							,SUM(IFNULL(1001_2000_RATIO,0)*FAM_MO_UNADJ_CNT)								1001_2000SUM
							,SUM(IFNULL(2001_2500_RATIO,0)*FAM_MO_UNADJ_CNT)								2001_2500SUM
							,SUM(IFNULL(2500_RATIO,0)*FAM_MO_UNADJ_CNT)										2500_SUM 
							,SUM(IFNULL(PRO_SVC_RATIO,0)*FAM_MO_UNADJ_CNT)									PRO_SVCSUM 
							,SUM(IFNULL(INVALID_RATIO,0)*FAM_MO_UNADJ_CNT)    								INVALID_SUM
							
							,SUM(IFNULL(MEAN_0_AVG,0)*FAM_MO_UNADJ_CNT * (1-IFNULL(INVALID_RATIO,0)))		MEAN_0_SUM
							,SUM(IFNULL(MEAN_NO0_AVG,0) * FAM_MO_UNADJ_CNT *
								(1 - IFNULL(INVALID_RATIO,0) - IFNULL(0_RATIO,0))
								) 																			MEAN_NO0_SUM
							,SUM(IFNULL(MEDIAN_0_AVG,0) * FAM_MO_UNADJ_CNT * (1-IFNULL(INVALID_RATIO,0))) 	MEDIAN_0_SUM
							,SUM(IFNULL(MEDIAN_NO0_AVG,0)* FAM_MO_UNADJ_CNT *
								(1 - IFNULL(INVALID_RATIO,0) - IFNULL(0_RATIO,0))) 							MEDIAN_NO0_SUM
							,SUM(FAM_MO_UNADJ_CNT * (1 - IFNULL(INVALID_RATIO,0)))					TOTFFYSTATE_VALID	
							,SUM(FAM_MO_UNADJ_CNT *
								(1 - IFNULL(INVALID_RATIO,0) - IFNULL(0_RATIO,0))) 			    			TOTFFYSTATE_VALID_NO0
							
						FROM (						
								
							
									SELECT  INC_GRP_RATIO.MODULE_HDR_ID
										   ,INC_GRP_RATIO.ENTITY_NAME
										   ,INC_GRP_RATIO.FISCAL_YEAR
										   ,F_HDR.ENTITY_ID
										   ,0_RATIO    
										   ,1_500_RATIO 
										   ,501_1000_RATIO
										   ,1001_2000_RATIO
										   ,2001_2500_RATIO
										   ,2500_RATIO 
										   ,PRO_SVC_RATIO 
										   ,INVALID_RATIO
										   ,F_HDR.FAM_MO_UNADJ_CNT
										   ,MEAN_0_AVG
										   ,MEAN_NO0_AVG
										   ,MEDIAN_0_AVG
										   ,MEDIAN_NO0_AVG 
									FROM TMP_FAMILY_RATIO	INC_GRP_RATIO
											
								 
											JOIN ( SELECT 
													 MODULE_HDR_ID
													,ENTITY_ID
													,ENTITY_NAME
													,FISCAL_YEAR
													,IFNULL(FAM_MO_UNADJ_CNT,0) AS FAM_MO_UNADJ_CNT
												FROM TMP_MOD_HDR_M
											)  F_HDR 
											ON INC_GRP_RATIO.MODULE_HDR_ID=F_HDR.MODULE_HDR_ID
											AND INC_GRP_RATIO.ENTITY_NAME=F_HDR.ENTITY_NAME
							) A
							
						GROUP BY 1,2;
		/*summation of all income categories */
        /* select * from CARS_801_TEMP_INCOME_CAT_CAL order by ENTITY_NAME; */
		DROP TEMPORARY TABLE IF EXISTS CARS_801_TEMP_INCOME_CAT_TOT;
		CREATE TEMPORARY TABLE CARS_801_TEMP_INCOME_CAT_TOT
		SELECT DISTINCT 
				 FACT.ENTITY_ID
				 ,S_INC_CAT.FISCAL_YEAR
                 ,S_INC_CAT.ENTITY_NAME
				
				,FACT.PFACTOR
			    ,CASE WHEN FACT.PFACTOR>0 THEN ROUND(TOT_AVG*FACT.PFACTOR) ELSE NULL END  FAMADJCNT 
				,ROUND(S_INC_CAT.0_AVG) AS  INCOME_0_FAMILY_UNADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN ROUND(S_INC_CAT.0_AVG*FACT.PFACTOR) ELSE NULL END  INCOME_0_FAMILY_ADJ_COUNT
				 ,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN S_INC_CAT.TOTAL_WGHT>0 THEN ROUND(S_INC_CAT.0_SUM/S_INC_CAT.TOTAL_WGHT*100,2) ELSE 0 END ELSE NULL END  INCOME_0_FAMILY_PERCENT 
				/*income category 1-500*/
				,ROUND(S_INC_CAT.1_500AVG) AS INCOME_1_500_FAMILY_UNADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN ROUND(S_INC_CAT.1_500AVG*FACT.PFACTOR)  ELSE NULL END INCOME_1_500_FAMILY_ADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN S_INC_CAT.TOTAL_WGHT>0 THEN ROUND(S_INC_CAT.1_500SUM/S_INC_CAT.TOTAL_WGHT*100,2)  ELSE 0 END ELSE NULL END INCOME_1_500_FAMILY_PERCENT
				/*income category 501-1000*/
				,ROUND(S_INC_CAT.501_1000AVG) AS INCOME_501_1000_FAMILY_UNADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN  ROUND(S_INC_CAT.501_1000AVG *FACT.PFACTOR) ELSE NULL END INCOME_501_1000_FAMILY_ADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN S_INC_CAT.TOTAL_WGHT>0 THEN ROUND(S_INC_CAT.501_1000SUM/S_INC_CAT.TOTAL_WGHT*100,2) ELSE 0 END ELSE NULL END INCOME_501_1000_FAMILY_PERCENT
				
				/*income category 1001-2000*/
				,ROUND(S_INC_CAT.1001_2000AVG) AS  INCOME_1001_2000_FAMILY_UNADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN ROUND(S_INC_CAT.1001_2000AVG*FACT.PFACTOR) ELSE NULL END INCOME_1001_2000_FAMILY_ADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN S_INC_CAT.TOTAL_WGHT>0 THEN ROUND(S_INC_CAT.1001_2000SUM/S_INC_CAT.TOTAL_WGHT*100,2) ELSE 0 END ELSE NULL END INCOME_1001_2000_FAMILY_PERCENT
				
				/*income category 2001-2500*/
				,ROUND(S_INC_CAT.2001_2500AVG)  INCOME_2001_2500_FAMILY_UNADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0  THEN ROUND(S_INC_CAT.2001_2500AVG*FACT.PFACTOR) ELSE NULL END INCOME_2001_2500_FAMILY_ADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN S_INC_CAT.TOTAL_WGHT>0 THEN ROUND(S_INC_CAT.2001_2500SUM/S_INC_CAT.TOTAL_WGHT*100,2) ELSE 0 END ELSE NULL END INCOME_2001_2500_FAMILY_PERCENT
				/*income category >2500*/
				,ROUND(S_INC_CAT.2500_AVG) AS  INCOME_GT_2500_FAMILY_UNADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN ROUND(S_INC_CAT.2500_AVG*FACT.PFACTOR)  ELSE NULL END INCOME_GT_2500_FAMILY_ADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN S_INC_CAT.TOTAL_WGHT>0 THEN ROUND(S_INC_CAT.2500_SUM/S_INC_CAT.TOTAL_WGHT*100,2) ELSE 0 END ELSE NULL END INCOME_GT_2500_FAMILY_PERCENT
			
				,ROUND(S_INC_CAT.PRO_SVCAVG ) AS  PROTECTIVE_SERVICE_FAMILY_UNADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN ROUND(S_INC_CAT.PRO_SVCAVG *FACT.PFACTOR) ELSE NULL END PROTECTIVE_SERVICE_FAMILY_ADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN  S_INC_CAT.TOTAL_WGHT>0 THEN ROUND(S_INC_CAT.PRO_SVCSUM /S_INC_CAT.TOTAL_WGHT*100,2) ELSE 0 END ELSE NULL END PROTECTIVE_SERVICE_FAMILY_PERCENT
			
				,ROUND(S_INC_CAT.INVALID_AVG) AS INVALID_INCOME_FAMILY_UNADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN  ROUND(S_INC_CAT.INVALID_AVG*FACT.PFACTOR)  ELSE NULL END INVALID_INCOME_FAMILY_ADJ_COUNT
				,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN S_INC_CAT.TOTAL_WGHT>0 THEN ROUND(S_INC_CAT.INVALID_SUM/S_INC_CAT.TOTAL_WGHT*100,2) ELSE 0 END ELSE NULL END INVALID_INCOME_FAMILY_PERCENT
			
				,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN S_INC_CAT.TOTFFYSTATE_VALID>0 THEN ROUND(IFNULL( MEAN_0_SUM,0)/TOTFFYSTATE_VALID) ELSE 0 END ELSE NULL END MEAN_WITH0_VAR
				,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN S_INC_CAT.TOTFFYSTATE_VALID_NO0>0 THEN ROUND(IFNULL( MEAN_NO0_SUM,0)/TOTFFYSTATE_VALID_NO0) ELSE 0 END ELSE NULL END MEAN_NO0_VAR
				,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN S_INC_CAT.TOTFFYSTATE_VALID>0 THEN ROUND(IFNULL( MEDIAN_0_SUM,0)/TOTFFYSTATE_VALID) ELSE 0 END ELSE NULL END MEDIAN_WITH0_VAR
				,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN S_INC_CAT.TOTFFYSTATE_VALID_NO0>0 THEN ROUND(IFNULL( MEDIAN_NO0_SUM,0)/TOTFFYSTATE_VALID_NO0) ELSE 0 END ELSE NULL END MEDIAN_NO0_VAR
				
				FROM
				(
				SELECT 		/* #ENTITY_ID */
							ENTITY_NAME
							,FISCAL_YEAR
							
							,(
							 0_AVG+
							1_500AVG+
							501_1000AVG+
							1001_2000AVG+
							2001_2500AVG+
							2500_AVG+
							PRO_SVCAVG+
							INVALID_AVG
							   
								
							) TOT_AVG
							,0_AVG
							,1_500AVG
							,501_1000AVG
							,1001_2000AVG
							,2001_2500AVG
							,2500_AVG 
							,PRO_SVCAVG 
							,INVALID_AVG
							
							,0_SUM
							,1_500SUM
							,501_1000SUM
							,1001_2000SUM
							,2001_2500SUM
							,2500_SUM
							,PRO_SVCSUM 
							,INVALID_SUM
							,(0_SUM+
							1_500SUM+
							501_1000SUM+
							1001_2000SUM+
							2001_2500SUM+
							2500_SUM+
							PRO_SVCSUM+
							INVALID_SUM) AS TOTAL_WGHT
							
							,MEAN_0_SUM
							,MEAN_NO0_SUM
							,MEDIAN_0_SUM
							,MEDIAN_NO0_SUM
							,TOTFFYSTATE_VALID	
							,TOTFFYSTATE_VALID_NO0
							
							FROM CARS_801_TEMP_INCOME_CAT_CAL
				) S_INC_CAT 
                  		
						LEFT JOIN ( SELECT 
									F_P.ENTITY_ID
									,F_P.ENTITY_NAME
									,F_P.PERIOD_DESC
                                   
									,CASE WHEN POOLING_FACTOR IS NULL THEN NULL ELSE POOLING_FACTOR * .01 END AS PFACTOR 
								FROM VW_CARS_801_POOLING_FACTOR F_P
                                    
						  ) FACT
									
				  
                  ON S_INC_CAT.ENTITY_NAME =FACT.ENTITY_NAME
                  AND FACT.PERIOD_DESC LIKE CONCAT('%', S_INC_CAT.FISCAL_YEAR);
		
INSERT INTO CARS_801_AGGN_INCOME_CAT
(
	AGGN_REF_ID, 
	ENTITY_ID, 
	ENTITY_NAME, 
	INVALID_INCOME_FAMILY_UNADJ_COUNT, 
	INVALID_INCOME_FAMILY_ADJ_COUNT, 
	INVALID_INCOME_FAMILY_PERCENT, 
	INCOME_0_FAMILY_UNADJ_COUNT,
	INCOME_0_FAMILY_ADJ_COUNT, 
	INCOME_0_FAMILY_PERCENT, 
	INCOME_1_500_FAMILY_UNADJ_COUNT, 
	INCOME_1_500_FAMILY_ADJ_COUNT, 
	INCOME_1_500_FAMILY_PERCENT, 
	INCOME_501_1000_FAMILY_UNADJ_COUNT, 
	INCOME_501_1000_FAMILY_ADJ_COUNT, 
	INCOME_501_1000_FAMILY_PERCENT, 
	INCOME_1001_2000_FAMILY_UNADJ_COUNT, 
	INCOME_1001_2000_FAMILY_ADJ_COUNT, 
	INCOME_1001_2000_FAMILY_PERCENT, 
	INCOME_2001_2500_FAMILY_UNADJ_COUNT, 
	INCOME_2001_2500_FAMILY_ADJ_COUNT, 
	INCOME_2001_2500_FAMILY_PERCENT, 
	INCOME_GT_2500_FAMILY_UNADJ_COUNT, 
	INCOME_GT_2500_FAMILY_ADJ_COUNT, 
	INCOME_GT_2500_FAMILY_PERCENT, 
	WITH_0_MEAN_INCOME_AMOUNT, 
	WITH_0_MEDIAN_INCOME_AMOUNT, 
	WITHOUT_0_MEAN_INCOME_AMOUNT, 
	WITHOUT_0_MEDIAN_INCOME_AMOUNT,  
	PROTECTIVE_SERVICE_FAMILY_UNADJ_COUNT,
	PROTECTIVE_SERVICE_FAMILY_ADJ_COUNT,
	PROTECTIVE_SERVICE_FAMILY_PERCENT

)
SELECT 
 i_aggn_ref_id
 ,ENTITY_ID
,ENTITY_NAME


,INVALID_INCOME_FAMILY_UNADJ_COUNT
,INVALID_INCOME_FAMILY_ADJ_COUNT
,INVALID_INCOME_FAMILY_PERCENT
,INCOME_0_FAMILY_UNADJ_COUNT
,INCOME_0_FAMILY_ADJ_COUNT 
,INCOME_0_FAMILY_PERCENT
,INCOME_1_500_FAMILY_UNADJ_COUNT 
,INCOME_1_500_FAMILY_ADJ_COUNT 
,INCOME_1_500_FAMILY_PERCENT 
,INCOME_501_1000_FAMILY_UNADJ_COUNT 
,INCOME_501_1000_FAMILY_ADJ_COUNT 
,INCOME_501_1000_FAMILY_PERCENT 
,INCOME_1001_2000_FAMILY_UNADJ_COUNT 
,INCOME_1001_2000_FAMILY_ADJ_COUNT 
,INCOME_1001_2000_FAMILY_PERCENT 
,INCOME_2001_2500_FAMILY_UNADJ_COUNT 
,INCOME_2001_2500_FAMILY_ADJ_COUNT 
,INCOME_2001_2500_FAMILY_PERCENT 
,INCOME_GT_2500_FAMILY_UNADJ_COUNT 
,INCOME_GT_2500_FAMILY_ADJ_COUNT 
,INCOME_GT_2500_FAMILY_PERCENT 
,MEAN_WITH0_VAR 
,MEDIAN_WITH0_VAR 
,MEAN_NO0_VAR
,MEDIAN_NO0_VAR
,PROTECTIVE_SERVICE_FAMILY_UNADJ_COUNT
,PROTECTIVE_SERVICE_FAMILY_ADJ_COUNT
,PROTECTIVE_SERVICE_FAMILY_PERCENT

FROM CARS_801_TEMP_INCOME_CAT_TOT
UNION ALL 


SELECT 
i_aggn_ref_id
,0
,'National'

,NAT_INVALID_INCOME_FAMILY_UNADJ_COUNT
,NAT_INVALID_INCOME_FAMILY_ADJ_COUNT
,CASE WHEN NAT_FAM_ADJ_CNT>0 			THEN 	ROUND(NAT_INVALID_INCOME_FAMILY_ADJ_COUNT/NAT_FAM_ADJ_CNT*100,2)   		ELSE 0 END NAT_INVALID_INCOME_PCT
,NAT_INCOME_0_FAMILY_UNADJ_COUNT
,NAT_INCOME_0_FAMILY_ADJ_COUNT 
,CASE WHEN NAT_FAM_ADJ_CNT>0 			THEN 	ROUND(NAT_INCOME_0_FAMILY_ADJ_COUNT/NAT_FAM_ADJ_CNT*100,2) 		  		ELSE 0 END NAT_INCOME_0_PCT
,NAT_INCOME_1_500_FAMILY_UNADJ_COUNT
,NAT_INCOME_1_500_FAMILY_ADJ_COUNT	
,CASE WHEN NAT_FAM_ADJ_CNT>0 			THEN 	ROUND(NAT_INCOME_1_500_FAMILY_ADJ_COUNT/NAT_FAM_ADJ_CNT*100,2) 	  		ELSE 0 END NAT_INCOME_1_500_PCT
,NAT_INCOME_501_1000_FAMILY_UNADJ_COUNT
,NAT_INCOME_501_1000_FAMILY_ADJ_COUNT
,CASE WHEN NAT_FAM_ADJ_CNT>0 			THEN 	ROUND(NAT_INCOME_501_1000_FAMILY_ADJ_COUNT/NAT_FAM_ADJ_CNT*100,2)  		ELSE 0 END NAT_INCOME_501_1000_PCT
,NAT_INCOME_1001_2000_FAMILY_UNADJ_COUNT
,NAT_INCOME_1001_2000_FAMILY_ADJ_COUNT
,CASE WHEN NAT_FAM_ADJ_CNT>0 			THEN 	ROUND(NAT_INCOME_1001_2000_FAMILY_ADJ_COUNT/NAT_FAM_ADJ_CNT*100,2) 		ELSE 0 END NAT_INCOME_1001_2000_PCT		
,NAT_INCOME_2001_2500_FAMILY_UNADJ_COUNT
,NAT_INCOME_2001_2500_FAMILY_ADJ_COUNT
,CASE WHEN NAT_FAM_ADJ_CNT>0 			THEN 	ROUND(NAT_INCOME_2001_2500_FAMILY_ADJ_COUNT/NAT_FAM_ADJ_CNT*100,2) 		ELSE 0 END NAT_INCOME_2001_2500_PCT
,NAT_INCOME_GT_2500_FAMILY_UNADJ_COUNT
,NAT_INCOME_GT_2500_FAMILY_ADJ_COUNT
,CASE WHEN NAT_FAM_ADJ_CNT>0 			THEN 	ROUND(NAT_INCOME_GT_2500_FAMILY_ADJ_COUNT/NAT_FAM_ADJ_CNT*100,2)	  	ELSE 0 END NAT_INCOME_GT_2500_PCT
,CASE WHEN NAT_FAM_ADJ_CNT>0 			THEN 	ROUND(NAT_MEAN_WITH0_WGHT_VAR/NAT_FAM_ADJ_CNT)				  			ELSE 0 END NAT_MEAN_WITH0
,CASE WHEN NAT_FAM_ADJ_CNT>0 			THEN 	ROUND(NAT_MEDIAN_WITH0_WGHT_VAR/NAT_FAM_ADJ_CNT)		 	  			ELSE 0 END NAT_MEDIAN_WITH0
,CASE WHEN NAT_INCOME_NO0_WGHT_VAR>0 	THEN 	ROUND(NAT_MEAN_NO0_WGHT_VAR/ NAT_INCOME_NO0_WGHT_VAR)		  			ELSE 0 END NAT_MEAN_NO0
,CASE WHEN NAT_INCOME_NO0_WGHT_VAR>0 	THEN 	ROUND(NAT_MEDIAN_NO0_WGHT_VAR/NAT_INCOME_NO0_WGHT_VAR) 	  				ELSE 0 END NAT_MEDIAN_NO0

,NAT_PROTECTIVE_SERVICE_FAMILY_UNADJ_COUNT
,NAT_PROTECTIVE_SERVICE_FAMILY_ADJ_COUNT
,CASE WHEN NAT_FAM_ADJ_CNT>0 			THEN 	ROUND(NAT_PROTECTIVE_SERVICE_FAMILY_ADJ_COUNT/NAT_FAM_ADJ_CNT*100,2) ELSE NULL END NAT_PROTECTIVE_SERVICE_PCT
FROM 
(
	SELECT 
		SUM(INVALID_INCOME_FAMILY_UNADJ_COUNT) 						AS NAT_INVALID_INCOME_FAMILY_UNADJ_COUNT
		,SUM(INVALID_INCOME_FAMILY_ADJ_COUNT) 						AS NAT_INVALID_INCOME_FAMILY_ADJ_COUNT
		,SUM(INCOME_0_FAMILY_UNADJ_COUNT) 							AS NAT_INCOME_0_FAMILY_UNADJ_COUNT
		,SUM(INCOME_0_FAMILY_ADJ_COUNT) 							AS NAT_INCOME_0_FAMILY_ADJ_COUNT
		,SUM(INCOME_1_500_FAMILY_UNADJ_COUNT)						AS NAT_INCOME_1_500_FAMILY_UNADJ_COUNT 
		,SUM(INCOME_1_500_FAMILY_ADJ_COUNT)							AS NAT_INCOME_1_500_FAMILY_ADJ_COUNT
		,SUM(INCOME_501_1000_FAMILY_UNADJ_COUNT) 					AS NAT_INCOME_501_1000_FAMILY_UNADJ_COUNT
		,SUM(INCOME_501_1000_FAMILY_ADJ_COUNT)						AS NAT_INCOME_501_1000_FAMILY_ADJ_COUNT
		,SUM(INCOME_1001_2000_FAMILY_UNADJ_COUNT)					AS NAT_INCOME_1001_2000_FAMILY_UNADJ_COUNT
		,SUM(INCOME_1001_2000_FAMILY_ADJ_COUNT) 					AS NAT_INCOME_1001_2000_FAMILY_ADJ_COUNT
		,SUM(INCOME_2001_2500_FAMILY_UNADJ_COUNT) 					AS NAT_INCOME_2001_2500_FAMILY_UNADJ_COUNT
		,SUM(INCOME_2001_2500_FAMILY_ADJ_COUNT) 					AS NAT_INCOME_2001_2500_FAMILY_ADJ_COUNT
		,SUM(INCOME_GT_2500_FAMILY_UNADJ_COUNT) 					AS NAT_INCOME_GT_2500_FAMILY_UNADJ_COUNT
		,SUM(INCOME_GT_2500_FAMILY_ADJ_COUNT) 						AS NAT_INCOME_GT_2500_FAMILY_ADJ_COUNT
		,SUM(PROTECTIVE_SERVICE_FAMILY_UNADJ_COUNT) 				AS NAT_PROTECTIVE_SERVICE_FAMILY_UNADJ_COUNT
		,SUM(PROTECTIVE_SERVICE_FAMILY_ADJ_COUNT)					AS NAT_PROTECTIVE_SERVICE_FAMILY_ADJ_COUNT	
		,(SUM(INVALID_INCOME_FAMILY_ADJ_COUNT)+
		SUM(INCOME_0_FAMILY_ADJ_COUNT)+
		SUM(INCOME_1_500_FAMILY_ADJ_COUNT)+ 
		SUM(INCOME_501_1000_FAMILY_ADJ_COUNT)+ 
		SUM(INCOME_1001_2000_FAMILY_ADJ_COUNT)+ 
		SUM(INCOME_2001_2500_FAMILY_ADJ_COUNT)+
        SUM(INCOME_GT_2500_FAMILY_ADJ_COUNT)+ 
		SUM(PROTECTIVE_SERVICE_FAMILY_ADJ_COUNT)) 					AS NAT_FAM_ADJ_CNT
		,SUM(FAMADJCNT * TOT2.INCOME_NO0_WGHT_VAR)					AS NAT_INCOME_NO0_WGHT_VAR
		,SUM(MEAN_WITH0_VAR*FAMADJCNT)								AS NAT_MEAN_WITH0_WGHT_VAR
		,SUM(MEAN_NO0_VAR*FAMADJCNT*TOT2.INCOME_NO0_WGHT_VAR)		AS NAT_MEAN_NO0_WGHT_VAR
		,SUM(MEDIAN_WITH0_VAR*FAMADJCNT)							AS NAT_MEDIAN_WITH0_WGHT_VAR
		,SUM(MEDIAN_NO0_VAR*FAMADJCNT*TOT2.INCOME_NO0_WGHT_VAR)		AS NAT_MEDIAN_NO0_WGHT_VAR
	FROM CARS_801_TEMP_INCOME_CAT_TOT TOT1
		JOIN (SELECT 
			 ENTITY_NAME
			,FISCAL_YEAR
			 ,CASE WHEN PFACTOR>0 THEN  
                  CASE WHEN INVALID_INCOME_FAMILY_PERCENT=100 THEN 0 
                  ELSE ((1 - (INVALID_INCOME_FAMILY_PERCENT / 100) - (INCOME_0_FAMILY_PERCENT / 100)) / (1 - (INVALID_INCOME_FAMILY_PERCENT / 100))) 
                  END 
              ELSE 1 END  INCOME_NO0_WGHT_VAR
			FROM CARS_801_TEMP_INCOME_CAT_TOT
		) TOT2 
	ON TOT1.ENTITY_NAME=TOT2.ENTITY_NAME
	AND TOT1.FISCAL_YEAR=TOT2.FISCAL_YEAR
) NAT_DT
UNION ALL
	SELECT 
		i_aggn_ref_id
		,E.ENTITY_ID		   
		,E.ENTITY_NAME
		
		,NULL
		,NULL
		,NULL
		
		,NULL
		,NULL
		,NULL
		
		,NULL
		,NULL
		,NULL
		
		,NULL
		,NULL
		,NULL
		
		,NULL
		,NULL
		,NULL
		
		,NULL
		,NULL
		,NULL
		
		,NULL
		,NULL
		,NULL
		
		,NULL
		,NULL
		,NULL
		
		,NULL
		,NULL
		,NULL
		
		,NULL
	
     FROM CARS_ENTITY E
          LEFT OUTER JOIN CARS_801_TEMP_INCOME_CAT_TOT C
     ON E.ENTITY_ID = C.ENTITY_ID
     WHERE E.ENTITY_TYPE_CD = 'STATE-TER'
     AND C.ENTITY_ID IS NULL ;
	SET v_total_rows_inserted = ROW_COUNT();	
/* SELECT TIME_TO_SEC(CURRENT_TIME)-TIME_TO_SEC(st_time); */

DROP TEMPORARY TABLE IF EXISTS TMP_MOD_HDR_M;
DROP TEMPORARY TABLE IF EXISTS TMP_FAMILY_HDR;
DROP TEMPORARY TABLE IF EXISTS TMP_FAMILY_HDR_MED;
DROP TEMPORARY TABLE IF EXISTS TMP_FAMILY_RATIO;
DROP TEMPORARY TABLE IF EXISTS CARS_801_TEMP_INCOME_CAT_CAL;
DROP TEMPORARY TABLE IF EXISTS CARS_801_TEMP_INCOME_CAT_TOT;

UPDATE CARS_801_SP_LOG
SET SP_STATUS_TEXT= CONCAT('Success. Rows inserted: ',v_total_rows_inserted, ' Rows Deleted :', v_total_rows_deleted), END_TS=NOW()
 
WHERE  SP_LOG_ID=( SELECT MAX(SP_LOG_ID) FROM CARS_801_SP_LOG WHERE SP_NAME ='CARS_801_AGGN_SP_INCOME_CAT');
COMMIT;		
	
END$$
DELIMITER ;