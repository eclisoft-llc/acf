DELIMITER $$
CREATE OR REPLACE PROCEDURE CARS_801_AGGN_SP_CARE_TYPE_HOURS_SUBSIDY( IN i_aggn_ref_id INT)
BEGIN

DECLARE v_rec_cnt INTEGER DEFAULT 0 ;
DECLARE v_total_rows_deleted INTEGER DEFAULT 0; 
DECLARE v_total_rows_inserted INTEGER DEFAULT 0; 
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
			SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
			 
			UPDATE CARS_801_SP_LOG
				SET SP_STATUS_TEXT='Error',SP_LOG_MESSAGE_TEXT=@full_error,END_TS=NOW()
			WHERE SP_LOG_ID=(SELECT MAX(SP_LOG_ID)FROM CARS_801_SP_LOG WHERE SP_NAME='CARS_801_AGGN_SP_CARE_TYPE_HOURS_SUBSIDY' );
			COMMIT;
		END;	
		
	INSERT INTO CARS_801_SP_LOG ( SP_NAME, START_TS)
		VALUES( 'CARS_801_AGGN_SP_CARE_TYPE_HOURS_SUBSIDY', NOW());	
	
		
		
	SELECT COUNT(*) INTO v_rec_cnt FROM CARS_801_AGGN_CARE_TYPE_HOURS_SUBSIDY WHERE  AGGN_REF_ID = i_aggn_ref_id;
 
		DELETE FROM CARS_801_AGGN_CARE_TYPE_HOURS_SUBSIDY
		WHERE AGGN_REF_ID = i_aggn_ref_id;
        
		SET v_total_rows_deleted = ROW_COUNT();

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_INIT;
CREATE TEMPORARY TABLE CARS_TMP_433_INIT AS  
SELECT
    H.MODULE_HDR_ID, 
	H.ENTITY_NAME, 
	H.ENTITY_ID,
	F.POOLING_FACTOR,
	R.FISCAL_YEAR, 
	H.FAMILY_COUNT AS FAMILY_UNADJ_AVG_COUNT, 
	C.CHILD_COUNT,
	C.POP_SAM_CHILD_COUNT AS CHILD_UNADJ_COUNT,
	SR.POPULATION_SAMPLE_CODE
FROM CARS_MODULE_PERIOD_HDR H
JOIN CARS_PERIOD P
ON H.PERIOD_ID = P.PERIOD_ID
AND 801_FLAG = 1
JOIN CARS_801_AGGN_REF R
ON CAST(SUBSTR(P.PERIOD_DESC, 5, 4) AS INTEGER) = R.FISCAL_YEAR
AND R.AGGN_REF_ID = i_aggn_ref_id
JOIN CARS_801_REC_COUNTS C
ON H.MODULE_HDR_ID = C.MODULE_HDR_ID
JOIN VW_CARS_801_POOLING_FACTOR F
ON SUBSTR(P.PERIOD_DESC, 2, 7) = F.PERIOD_DESC
AND H.ENTITY_ID = F.ENTITY_ID
JOIN CARS_801_STATE_REF SR
ON H.ENTITY_ID = SR.ENTITY_ID
AND SUBSTR(P.PERIOD_DESC, 5, 4) = SR.FISCAL_YEAR
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_BASE;
CREATE TEMPORARY TABLE CARS_TMP_433_BASE AS  
SELECT
MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, CHILD_ID, SETTING_ID, CHILD_CARE_TYPE_CD, CHILD_CARE_HOURS, MONTHLY_AMOUNT, AGE_CALC, REP_YYYYMM, BIRTH_YYYYMM
FROM 
(
		SELECT H.MODULE_HDR_ID, H.ENTITY_ID, H.ENTITY_NAME, C.CHILD_ID, S.SETTING_ID, S.CHILD_CARE_TYPE_CD, S.CHILD_CARE_HOURS, S.MONTHLY_AMOUNT, C.BIRTH_YYYYMM, F.REP_YYYYMM,
		((SUBSTRING(F.REP_YYYYMM, 1, 4) * 12) + SUBSTRING(F.REP_YYYYMM,5,2)) - ((SUBSTRING(C.BIRTH_YYYYMM, 1, 4) * 12) + SUBSTRING(C.BIRTH_YYYYMM,5,2)) AS AGE_CALC
		FROM CARS_MODULE_PERIOD_HDR H
		JOIN CARS_PERIOD P
		ON H.PERIOD_ID = P.PERIOD_ID
		AND 801_FLAG = 1
		JOIN CARS_801_AGGN_REF R
		ON CAST(SUBSTR(P.PERIOD_DESC, 5, 4) AS INTEGER) = R.FISCAL_YEAR
		AND R.AGGN_REF_ID = i_aggn_ref_id
		JOIN CARS_801_REC_COUNTS RC
		ON H.MODULE_HDR_ID = RC.MODULE_HDR_ID
		JOIN CARS_801_FAMILY F
		ON H.MODULE_HDR_ID = F.MODULE_HDR_ID
		JOIN CARS_801_CHILD C
		ON H.MODULE_HDR_ID = C.MODULE_HDR_ID
		AND F.FAMILY_ID = C.FAMILY_ID
		JOIN CARS_801_SETTING S
		ON C.CHILD_ID = S.CHILD_ID
		AND H.MODULE_HDR_ID = S.MODULE_HDR_ID
) A
;


CREATE INDEX IX1 ON CARS_TMP_433_BASE (CHILD_ID);


DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_INVALID;  	
CREATE TEMPORARY TABLE CARS_TMP_433_INVALID AS  
SELECT
DISTINCT MODULE_HDR_ID, ENTITY_NAME, ENTITY_ID, CHILD_ID
FROM 
(
		SELECT
		MODULE_HDR_ID, ENTITY_NAME, ENTITY_ID, CHILD_ID, AGE_CALC, REP_YYYYMM, BIRTH_YYYYMM,
		MAX(CASE WHEN CHILD_CARE_HOURS IS NULL THEN 1 ELSE 0 END) AS INVALID_CHILD_CARE_HOURS, MAX(CASE WHEN MONTHLY_AMOUNT IS NULL THEN 1 ELSE 0 END) AS INVALID_MONTHLY_AMOUNT,
		MAX(CASE WHEN CHILD_CARE_TYPE_CD IS NULL THEN 1 ELSE 0 END) AS INVALID_CARE_TYPE
		FROM CARS_TMP_433_BASE
		GROUP BY MODULE_HDR_ID, ENTITY_NAME, ENTITY_ID, CHILD_ID, AGE_CALC, REP_YYYYMM, BIRTH_YYYYMM
) A
WHERE AGE_CALC < 0 OR AGE_CALC IS NULL OR BIRTH_YYYYMM IS NULL OR REP_YYYYMM IS NULL 
OR INVALID_CHILD_CARE_HOURS = 1 OR INVALID_MONTHLY_AMOUNT = 1 OR INVALID_CARE_TYPE = 1
;


CREATE INDEX IX1 ON CARS_TMP_433_INVALID (CHILD_ID);


/*** DO THE INVALID CALCS ****/

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_INVALID_CNT;  	
CREATE TEMPORARY TABLE CARS_TMP_433_INVALID_CNT AS  
SELECT
MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, COUNT(DISTINCT CHILD_ID) AS INVALID_CHILD_UNADJ_COUNT
FROM CARS_TMP_433_INVALID
GROUP BY MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME
;


DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_UNADJ_DATA;
CREATE TEMPORARY TABLE CARS_TMP_433_UNADJ_DATA AS  
SELECT
I.MODULE_HDR_ID, I.ENTITY_ID, I.ENTITY_NAME, 
CASE WHEN INVALID_CHILD_UNADJ_COUNT IS NULL THEN 0
     WHEN POPULATION_SAMPLE_CODE = 'S' THEN INVALID_CHILD_UNADJ_COUNT / CHILD_COUNT * CHILD_UNADJ_COUNT 
	 ELSE INVALID_CHILD_UNADJ_COUNT END AS INVALID_CHILD_UNADJ_COUNT,
CHILD_UNADJ_COUNT, POOLING_FACTOR

FROM CARS_TMP_433_INIT I
LEFT OUTER JOIN CARS_TMP_433_INVALID_CNT A
ON A.MODULE_HDR_ID = I.MODULE_HDR_ID
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_ADJ_DATA;
CREATE TEMPORARY TABLE CARS_TMP_433_ADJ_DATA AS  
SELECT
ENTITY_ID, ENTITY_NAME, 
SUM(CHILD_UNADJ_COUNT) AS CHILD_UNADJ_COUNT,
ROUND(AVG(INVALID_CHILD_UNADJ_COUNT),0) AS INVALID_CHILD_UNADJ_COUNT,
CASE WHEN POOLING_FACTOR IS NULL THEN NULL ELSE ROUND(AVG(INVALID_CHILD_UNADJ_COUNT) * POOLING_FACTOR * .01, 0) END AS INVALID_CHILD_ADJ_COUNT, 
ROUND(SUM(INVALID_CHILD_UNADJ_COUNT) / SUM(CHILD_UNADJ_COUNT) * 100, 2) AS INVALID_PCT
FROM CARS_TMP_433_UNADJ_DATA
GROUP BY ENTITY_ID, ENTITY_NAME
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_NAT_ADJ_DATA;
CREATE TEMPORARY TABLE CARS_TMP_433_NAT_ADJ_DATA AS  
SELECT
0 AS ENTITY_ID, 'National' AS ENTITY_NAME,
SUM(INVALID_CHILD_UNADJ_COUNT) AS INVALID_CHILD_UNADJ_COUNT,
SUM(INVALID_CHILD_ADJ_COUNT) AS INVALID_CHILD_ADJ_COUNT, 
ROUND(SUM(INVALID_CHILD_UNADJ_COUNT) / SUM(CHILD_UNADJ_COUNT) * 100, 2) AS INVALID_PCT
FROM CARS_TMP_433_ADJ_DATA
;

/*** END OF INVALID CALCS ****/

/***** THIS IS A SPECIAL PIECE OF CODE TO WRITE A FOOTNOTE FOR REPORT 423 AS THE INVALID CALCULATION FOR THAT IS THE SAME AS THIS BUT THIS IS BEING DONE HERE ****/

DELETE FROM CARS_801_AGGN_REPORT_FNOTE
		WHERE AGGN_REF_ID = i_aggn_ref_id AND REPORT_NUM = '423' AND FNOTE_SEQ_NUM = 1;

INSERT INTO CARS_801_AGGN_REPORT_FNOTE
(
AGGN_REF_ID,
REPORT_NUM,
FNOTE_SEQ_NUM,
FNOTE_TEXT
)
SELECT  
i_aggn_ref_id,
'423',
1,
CONCAT('Nationally, ', INVALID_PCT, '% of the children were excluded from the above table because either their age was invalid/not reported or setting elements identified as invalid or not reported, including hours, payment to provider, care type, or no setting records.')
FROM CARS_TMP_433_NAT_ADJ_DATA
;


/*** SPECIAL PIECE END ****/
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_VALID;
CREATE TEMPORARY TABLE CARS_TMP_433_VALID AS  
SELECT
B.MODULE_HDR_ID, B.ENTITY_ID, B.ENTITY_NAME, B.CHILD_ID, SETTING_ID, CHILD_CARE_TYPE_CD, CHILD_CARE_HOURS, MONTHLY_AMOUNT, AGE_CALC
FROM CARS_TMP_433_BASE B
LEFT OUTER JOIN CARS_TMP_433_INVALID I
ON B.CHILD_ID = I.CHILD_ID
WHERE I.CHILD_ID IS NULL
;

CREATE INDEX IX1 ON CARS_TMP_433_VALID (CHILD_ID);

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_FINAL_BASE;
CREATE TEMPORARY TABLE CARS_TMP_433_FINAL_BASE AS 
SELECT 
MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, C.CHILD_ID, SETTING_ID, CHILD_CARE_TYPE_CD, CHILD_CARE_HOURS, MONTHLY_AMOUNT, AGE_CALC,
ROUND(CHILD_CARE_HOURS / TOT_CHILD_CARE_HOURS, 2) AS CALC_CHILD_HRS_PCT
FROM 
(
	SELECT
	MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, CHILD_ID, SETTING_ID, CHILD_CARE_TYPE_CD, CHILD_CARE_HOURS, MONTHLY_AMOUNT, AGE_CALC
	FROM CARS_TMP_433_VALID
) C
JOIN 
(
	SELECT
	CHILD_ID, SUM(CHILD_CARE_HOURS) AS TOT_CHILD_CARE_HOURS
	FROM CARS_TMP_433_VALID
	GROUP BY CHILD_ID
) S
ON C.CHILD_ID = S.CHILD_ID
;


DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_INTERIM;
CREATE TEMPORARY TABLE CARS_TMP_433_INTERIM AS 
SELECT 
MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, CHILD_ID, SETTING_ID, CHILD_CARE_HOURS, MONTHLY_AMOUNT, 
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (1,5,6) THEN CALC_CHILD_HRS_PCT ELSE NULL END AS CHILD_HOME,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (2,7,8) THEN CALC_CHILD_HRS_PCT ELSE NULL END AS FAMILY_HOME,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (3,9,10) THEN CALC_CHILD_HRS_PCT ELSE NULL END AS GROUP_HOME,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (4,11) THEN CALC_CHILD_HRS_PCT ELSE NULL END AS CENTER,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (1,2,3,4,5,6,7,8,9,10,11) THEN CALC_CHILD_HRS_PCT ELSE NULL END AS ALL_CARE,

CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (1,5,6) THEN CHILD_CARE_HOURS ELSE NULL END AS CHILD_HOME_HOURS,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (2,7,8) THEN CHILD_CARE_HOURS ELSE NULL END AS FAMILY_HOME_HOURS,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (3,9,10) THEN CHILD_CARE_HOURS ELSE NULL END AS GROUP_HOME_HOURS,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (4,11) THEN CHILD_CARE_HOURS ELSE NULL END AS CENTER_HOURS,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (1,2,3,4,5,6,7,8,9,10,11) THEN CHILD_CARE_HOURS ELSE NULL END AS ALL_CARE_HOURS,

CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (1,5,6) THEN MONTHLY_AMOUNT ELSE NULL END AS CHILD_HOME_SUBSIDY,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (2,7,8) THEN MONTHLY_AMOUNT ELSE NULL END AS FAMILY_HOME_SUBSIDY,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (3,9,10) THEN MONTHLY_AMOUNT ELSE NULL END AS GROUP_HOME_SUBSIDY,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (4,11) THEN MONTHLY_AMOUNT ELSE NULL END AS CENTER_SUBSIDY,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (1,2,3,4,5,6,7,8,9,10,11) THEN MONTHLY_AMOUNT ELSE NULL END AS ALL_CARE_SUBSIDY
FROM CARS_TMP_433_FINAL_BASE
;



DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433;
CREATE TEMPORARY TABLE CARS_TMP_433 AS 
SELECT
ENTITY_ID, ENTITY_NAME, 
ROUND(SUM(CHILD_HOME_HOURS) / SUM(CHILD_HOME), 0) AS CHILD_HOME_HOURS,
ROUND(SUM(CHILD_HOME_SUBSIDY) / SUM(CHILD_HOME), 0) AS CHILD_HOME_SUBSIDY,

ROUND(SUM(FAMILY_HOME_HOURS) / SUM(FAMILY_HOME), 0) AS FAMILY_HOME_HOURS,
ROUND(SUM(FAMILY_HOME_SUBSIDY) / SUM(FAMILY_HOME), 0) AS FAMILY_HOME_SUBSIDY,

ROUND(SUM(GROUP_HOME_HOURS) / SUM(GROUP_HOME), 0) AS GROUP_HOME_HOURS,
ROUND(SUM(GROUP_HOME_SUBSIDY) / SUM(GROUP_HOME), 0) AS GROUP_HOME_SUBSIDY,

ROUND(SUM(CENTER_HOURS) / SUM(CENTER), 0) AS CENTER_HOURS,
ROUND(SUM(CENTER_SUBSIDY) / SUM(CENTER), 0) AS CENTER_SUBSIDY,

ROUND(SUM(ALL_CARE_HOURS) / SUM(ALL_CARE), 0) AS ALL_CARE_HOURS,
ROUND(SUM(ALL_CARE_SUBSIDY) / SUM(ALL_CARE), 0) AS ALL_CARE_SUBSIDY

FROM CARS_TMP_433_INTERIM
GROUP BY ENTITY_ID, ENTITY_NAME
;


DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_NAT;
CREATE TEMPORARY TABLE CARS_TMP_433_NAT AS 
SELECT
0 AS ENTITY_ID, 'National' AS ENTITY_NAME,
ROUND(SUM(CHILD_HOME_HOURS) / SUM(CHILD_HOME), 0) AS CHILD_HOME_HOURS,
ROUND(SUM(CHILD_HOME_SUBSIDY) / SUM(CHILD_HOME), 0) AS CHILD_HOME_SUBSIDY,

ROUND(SUM(FAMILY_HOME_HOURS) / SUM(FAMILY_HOME), 0) AS FAMILY_HOME_HOURS,
ROUND(SUM(FAMILY_HOME_SUBSIDY) / SUM(FAMILY_HOME), 0) AS FAMILY_HOME_SUBSIDY,

ROUND(SUM(GROUP_HOME_HOURS) / SUM(GROUP_HOME), 0) AS GROUP_HOME_HOURS,
ROUND(SUM(GROUP_HOME_SUBSIDY) / SUM(GROUP_HOME), 0) AS GROUP_HOME_SUBSIDY,

ROUND(SUM(CENTER_HOURS) / SUM(CENTER), 0) AS CENTER_HOURS,
ROUND(SUM(CENTER_SUBSIDY) / SUM(CENTER), 0) AS CENTER_SUBSIDY,

ROUND(SUM(ALL_CARE_HOURS) / SUM(ALL_CARE), 0) AS ALL_CARE_HOURS,
ROUND(SUM(ALL_CARE_SUBSIDY) / SUM(ALL_CARE), 0) AS ALL_CARE_SUBSIDY

FROM CARS_TMP_433_INTERIM
GROUP BY 1,2
;

INSERT INTO CARS_801_AGGN_CARE_TYPE_HOURS_SUBSIDY 
(
AGGN_REF_ID, 
ENTITY_ID, 
ENTITY_NAME, 
CHILD_HOME_HOURS, 
CHILD_HOME_SUBSIDY, 
FAMILY_HOME_HOURS, 
FAMILY_HOME_SUBSIDY, 
GROUP_HOME_HOURS, 
GROUP_HOME_SUBSIDY, 
CENTER_HOURS, 
CENTER_SUBSIDY, 
ALL_HOURS, 
ALL_SUBSIDY, 
INVALID_UNADJ_CHILD_COUNT, 
INVALID_ADJ_CHILD_COUNT, 
INVALID_CHILD_PERCENT
)
SELECT
i_aggn_ref_id,
A.ENTITY_ID, 
A.ENTITY_NAME, 
COALESCE(CHILD_HOME_HOURS,0), 
COALESCE(CHILD_HOME_SUBSIDY,0), 
COALESCE(FAMILY_HOME_HOURS,0), 
COALESCE(FAMILY_HOME_SUBSIDY,0), 
COALESCE(GROUP_HOME_HOURS,0), 
COALESCE(GROUP_HOME_SUBSIDY,0), 
COALESCE(CENTER_HOURS,0), 
COALESCE(CENTER_SUBSIDY,0), 
COALESCE(ALL_CARE_HOURS,0), 
COALESCE(ALL_CARE_SUBSIDY,0),
COALESCE(INVALID_CHILD_UNADJ_COUNT,0),
COALESCE(INVALID_CHILD_ADJ_COUNT,0),
COALESCE(INVALID_PCT,0)
FROM CARS_TMP_433 A
LEFT OUTER JOIN CARS_TMP_433_ADJ_DATA B
ON A.ENTITY_ID = B.ENTITY_ID

UNION ALL 

SELECT
i_aggn_ref_id,
A.ENTITY_ID, 
A.ENTITY_NAME, 
COALESCE(CHILD_HOME_HOURS,0), 
COALESCE(CHILD_HOME_SUBSIDY,0), 
COALESCE(FAMILY_HOME_HOURS,0), 
COALESCE(FAMILY_HOME_SUBSIDY,0), 
COALESCE(GROUP_HOME_HOURS,0), 
COALESCE(GROUP_HOME_SUBSIDY,0), 
COALESCE(CENTER_HOURS,0), 
COALESCE(CENTER_SUBSIDY,0), 
COALESCE(ALL_CARE_HOURS,0), 
COALESCE(ALL_CARE_SUBSIDY,0),
COALESCE(INVALID_CHILD_UNADJ_COUNT,0),
COALESCE(INVALID_CHILD_ADJ_COUNT,0),
COALESCE(INVALID_PCT,0)
FROM CARS_TMP_433_NAT A
LEFT OUTER JOIN CARS_TMP_433_NAT_ADJ_DATA B
ON A.ENTITY_ID = B.ENTITY_ID

UNION ALL 

SELECT
i_aggn_ref_id,
E.ENTITY_ID, 
E.ENTITY_NAME,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL
FROM CARS_ENTITY E
LEFT OUTER JOIN CARS_TMP_433 C
ON E.ENTITY_ID = C.ENTITY_ID
WHERE E.ENTITY_TYPE_CD = 'STATE-TER'
AND C.ENTITY_ID IS NULL 
;




		SET v_total_rows_inserted = ROW_COUNT();

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_BASE;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_INVALID;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_INIT;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_INVALID_CNT;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_UNADJ_DATA;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_ADJ_DATA;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_NAT_ADJ_DATA;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_VALID;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_FINAL_BASE;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_INTERIM;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_433_NAT;

UPDATE CARS_801_SP_LOG
SET SP_STATUS_TEXT= CONCAT('Success. Rows inserted: ',v_total_rows_inserted, ' Rows Deleted :', v_total_rows_deleted), END_TS=NOW()
WHERE  SP_LOG_ID=( SELECT MAX(SP_LOG_ID) FROM CARS_801_SP_LOG WHERE SP_NAME ='CARS_801_AGGN_SP_CARE_TYPE_HOURS_SUBSIDY');
COMMIT;		
	
END$$
DELIMITER ;