DELIMITER $$
CREATE OR REPLACE PROCEDURE CARS_801_AGGN_SP_SINGLE_PARENT( IN i_aggn_ref_id INT)
BEGIN
/******************************************************
 * Author: Zohreh Torabian
 * Report Name: Head of Family Status
 * Report Number: 280
 * Desc: It populates data for table, 
 *		 CARS_801_AGGN_SINGLE_PARENT.
 ******************************************************/
DECLARE v_rec_cnt INTEGER DEFAULT 0 ;
DECLARE v_total_rows_deleted INTEGER DEFAULT 0; 
DECLARE v_total_rows_inserted INTEGER DEFAULT 0; 
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
			SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
			 
			UPDATE CARS_801_SP_LOG
				SET SP_STATUS_TEXT='Error',SP_LOG_MESSAGE_TEXT=@full_error,END_TS=NOW()
			WHERE SP_LOG_ID=(SELECT MAX(SP_LOG_ID)FROM CARS_801_SP_LOG WHERE SP_NAME='CARS_801_AGGN_SP_SINGLE_PARENT' );
			COMMIT;
		END;	
		
	INSERT INTO CARS_801_SP_LOG ( SP_NAME, START_TS)
		VALUES( 'CARS_801_AGGN_SP_SINGLE_PARENT',  NOW());	
		
		
	SELECT COUNT(*) INTO v_rec_cnt FROM CARS_801_AGGN_SINGLE_PARENT WHERE  AGGN_REF_ID = i_aggn_ref_id;
 
		DELETE FROM CARS_801_AGGN_SINGLE_PARENT
		WHERE AGGN_REF_ID = i_aggn_ref_id;
        
		SET v_total_rows_deleted = ROW_COUNT();

DROP TEMPORARY TABLE IF EXISTS TMP_MOD_HDR_M;
CREATE TEMPORARY TABLE TMP_MOD_HDR_M AS
				    SELECT 	DISTINCT HDR.MODULE_HDR_ID 
						   
						   ,AGGN_REF_ID
						   ,HDR.ENTITY_ID
						   ,HDR.ENTITY_NAME	
						   ,REC.FAMILY_COUNT AS FAMILY_COUNT
						   ,HDR.FAMILY_COUNT AS FAM_MO_UNADJ_CNT
						   ,AGGN_RF.FISCAL_YEAR 
							FROM CARS_MODULE_PERIOD_HDR HDR 
								JOIN CARS_PERIOD P 
							ON P.PERIOD_ID=HDR.PERIOD_ID 
							AND P.801_FLAG = 1
								JOIN CARS_801_REC_COUNTS REC
							ON REC.MODULE_HDR_ID=HDR.MODULE_HDR_ID
								JOIN CARS_801_AGGN_REF AGGN_RF 
							ON CAST(SUBSTR(P.PERIOD_DESC,5,4) AS INTEGER) =AGGN_RF.FISCAL_YEAR
							AND AGGN_RF.AGGN_REF_ID=i_aggn_ref_id;
                            SELECT ENTITY_NAME,COUNT(*) FROM TMP_MOD_HDR_M GROUP BY ENTITY_NAME ;
		
		

#SELECT * FROM CARS_801_TEMP_SINGLE_PARENT_SM;
DROP TEMPORARY TABLE IF EXISTS CARS_801_TEMP_SINGLE_PARENT_AVG;
CREATE TEMPORARY TABLE CARS_801_TEMP_SINGLE_PARENT_AVG
    AS		
SELECT 
	 HDR.ENTITY_ID
	,HDR.ENTITY_NAME
	,HDR.FISCAL_YEAR 
	,AVG(IFNULL(SINGLE_PARENT_RATIO *HDR.FAM_MO_UNADJ_CNT,0)) 				WGHTD1AVG
	,AVG(IFNULL(NOT_SINGLE_PARENT_RATIO*HDR.FAM_MO_UNADJ_CNT,0))			WGHTD2AVG
	,AVG(IFNULL(CHILD_HEAD_RATIO*HDR.FAM_MO_UNADJ_CNT,0))					WGHTD3AVG
	,AVG(IFNULL(INVALID_SINGLE_PARENT_RATIO*HDR.FAM_MO_UNADJ_CNT,0))		WGHTD4AVG
    ,SUM(IFNULL(SINGLE_PARENT_RATIO *HDR.FAM_MO_UNADJ_CNT,0)) 				WGHTD1SUM
	,SUM(IFNULL(NOT_SINGLE_PARENT_RATIO*HDR.FAM_MO_UNADJ_CNT,0))			WGHTD2SUM
	,SUM(IFNULL(CHILD_HEAD_RATIO*HDR.FAM_MO_UNADJ_CNT,0))					WGHTD3SUM
	,SUM(IFNULL(INVALID_SINGLE_PARENT_RATIO*HDR.FAM_MO_UNADJ_CNT,0))		WGHTD4SUM
FROM (
        SELECT 	
         HDR_M.MODULE_HDR_ID
        ,HDR_M.ENTITY_NAME
        ,HDR_M.FISCAL_YEAR 
        ,CASE WHEN HDR_M.FAMILY_COUNT>0 THEN COUNT(CASE  WHEN  FAM.SINGLE_PARENT_CD=1 THEN 1 END) 											 /HDR_M.FAMILY_COUNT ELSE 0 END AS SINGLE_PARENT_RATIO 
        ,CASE WHEN HDR_M.FAMILY_COUNT>0 THEN COUNT( CASE WHEN  FAM.SINGLE_PARENT_CD=0 THEN 1 END) 											 /HDR_M.FAMILY_COUNT ELSE 0 END AS NOT_SINGLE_PARENT_RATIO
        ,CASE WHEN HDR_M.FAMILY_COUNT>0 THEN COUNT( CASE WHEN  FAM.SINGLE_PARENT_CD=9 AND (FAM.REASON_CD=4 OR FAM.REASON_CD=9 ) THEN 1 END ) /HDR_M.FAMILY_COUNT ELSE 0 END AS CHILD_HEAD_RATIO
		,CASE WHEN HDR_M.FAMILY_COUNT>0 THEN (HDR_M.FAMILY_COUNT-(
            					 COUNT(CASE WHEN FAM.SINGLE_PARENT_CD=1 THEN  1 END)
                                +COUNT( CASE WHEN FAM.SINGLE_PARENT_CD=0 THEN 1 END )
                                +COUNT( CASE WHEN  FAM.SINGLE_PARENT_CD=9 AND (FAM.REASON_CD=4 OR FAM.REASON_CD=9 ) THEN 1 END )
                               
         						))																											/HDR_M.FAMILY_COUNT ELSE 0 END AS INVALID_SINGLE_PARENT_RATIO
        FROM  TMP_MOD_HDR_M HDR_M
            JOIN CARS_801_FAMILY FAM
        ON HDR_M.MODULE_HDR_ID= FAM.MODULE_HDR_ID
        GROUP BY 1,2,3
  ) T
  	JOIN TMP_MOD_HDR_M HDR
ON 	T.MODULE_HDR_ID =HDR.MODULE_HDR_ID
AND T.FISCAL_YEAR=HDR.FISCAL_YEAR 
GROUP BY 1,2,3;
SELECT * FROM CARS_801_TEMP_SINGLE_PARENT_AVG;
DROP TEMPORARY TABLE IF EXISTS CARS_801_TEMP_SINGLE_PARENT_TOT;
CREATE TEMPORARY TABLE CARS_801_TEMP_SINGLE_PARENT_TOT
SELECT
		 SG_PAR.ENTITY_ID
		,SG_PAR.ENTITY_NAME
		,SG_PAR.FISCAL_YEAR
		,ROUND(FACT.PFACTOR,2) PFACTOR
		
		
		/* single parent or non-single parent or child is reported as head of household.*/
		/* in this section, it uses formula to populate family unadjusted/adjusted count per state and fiscal year for each head of Family Status*/
		/* in this section, it uses formula to populate family count percentage per state and fiscal year for each head of Family Status*/
		/*single parent*/
		,ROUND(SINGLE_PARENT_FAMILY_UNADJ_COUNT) AS SINGLE_PARENT_FAMILY_UNADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN  ROUND(SG_PAR.SINGLE_PARENT_FAMILY_UNADJ_COUNT*FACT.PFACTOR) ELSE NULL END  SINGLE_PARENT_FAMILY_ADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN SG_PAR.TOTAL_WGHT>0 THEN ROUND(SG_PAR.SINGLE_PARENT_FAMILY_UNADJ_COUNT_SUM/SG_PAR.TOTAL_WGHT*100,2) ELSE 0 END ELSE NULL END  SINGLE_PARENT_FAMILY_PERCENT
		/*non-single parent*/
		,ROUND(NOT_SINGLE_PARENT_FAMILY_UNADJ_COUNT) AS NOT_SINGLE_PARENT_FAMILY_UNADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN  ROUND(SG_PAR.NOT_SINGLE_PARENT_FAMILY_UNADJ_COUNT*FACT.PFACTOR)  ELSE NULL END NOT_SINGLE_PARENT_FAMILY_ADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN SG_PAR.TOTAL_WGHT>0 THEN ROUND(SG_PAR.NOT_SINGLE_PARENT_FAMILY_UNADJ_COUNT_SUM/SG_PAR.TOTAL_WGHT*100,2) ELSE 0 END ELSE NULL END NOT_SINGLE_PARENT_FAMILY_PERCENT
		/*child is reported as head of household*/
		,ROUND(CHILD_HEAD_FAMILY_UNADJ_COUNT) AS CHILD_HEAD_FAMILY_UNADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN  ROUND(SG_PAR.CHILD_HEAD_FAMILY_UNADJ_COUNT*FACT.PFACTOR)  ELSE NULL END CHILD_HEAD_FAMILY_ADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN SG_PAR.TOTAL_WGHT>0 THEN ROUND((SG_PAR.CHILD_HEAD_FAMILY_UNADJ_COUNT_SUM/SG_PAR.TOTAL_WGHT)*100,2) ELSE 0 END ELSE NULL END CHILD_HEAD_FAMILY_PERCENT
		/*invalid values*/
		,ROUND(INVALID_FAMILY_UNADJ_COUNT) AS INVALID_FAMILY_UNADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN  ROUND(SG_PAR.INVALID_FAMILY_UNADJ_COUNT*FACT.PFACTOR) ELSE NULL END INVALID_FAMILY_ADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN SG_PAR.TOTAL_WGHT>0 THEN ROUND((SG_PAR.INVALID_FAMILY_UNADJ_COUNT_SUM/SG_PAR.TOTAL_WGHT)*100,2) ELSE 0 END ELSE NULL END INVALID_FAMILY_PERCENT
		FROM  
			 ( SELECT 	ENTITY_ID 
              			,ENTITY_NAME
						,FISCAL_YEAR  
						,WGHTD1AVG 	SINGLE_PARENT_FAMILY_UNADJ_COUNT
						,WGHTD2AVG  NOT_SINGLE_PARENT_FAMILY_UNADJ_COUNT
						,WGHTD3AVG  CHILD_HEAD_FAMILY_UNADJ_COUNT
						,WGHTD4AVG 	INVALID_FAMILY_UNADJ_COUNT
              			,WGHTD1SUM  SINGLE_PARENT_FAMILY_UNADJ_COUNT_SUM
              			,WGHTD2SUM  NOT_SINGLE_PARENT_FAMILY_UNADJ_COUNT_SUM
              			,WGHTD3SUM  CHILD_HEAD_FAMILY_UNADJ_COUNT_SUM
              			,WGHTD4SUM  INVALID_FAMILY_UNADJ_COUNT_SUM
						,(	WGHTD1SUM + 
							WGHTD2SUM +
							WGHTD3SUM +
							WGHTD4SUM) TOTAL_WGHT
						FROM CARS_801_TEMP_SINGLE_PARENT_AVG
					) SG_PAR
			LEFT JOIN ( SELECT 
							ENTITY_ID
							,ENTITY_NAME
							,PERIOD_DESC
							,IFNULL(POOLING_FACTOR,0)*.01 AS PFACTOR 
						FROM VW_CARS_801_POOLING_FACTOR FACT 
				  ) FACT
     						
		ON 	FACT.PERIOD_DESC LIKE CONCAT('%',SG_PAR.FISCAL_YEAR)
		AND FACT.ENTITY_NAME=SG_PAR.ENTITY_NAME;

 INSERT INTO CARS_801_AGGN_SINGLE_PARENT 
(							
AGGN_REF_ID ,
 ENTITY_ID , 
 ENTITY_NAME , 
 INVALID_FAMILY_UNADJ_COUNT ,
 INVALID_FAMILY_ADJ_COUNT , 
 INVALID_FAMILY_PERCENT , 
 SINGLE_PARENT_FAMILY_UNADJ_COUNT , 
 SINGLE_PARENT_FAMILY_ADJ_COUNT , 
 SINGLE_PARENT_FAMILY_PERCENT , 
 NOT_SINGLE_PARENT_FAMILY_UNADJ_COUNT , 
 NOT_SINGLE_PARENT_FAMILY_ADJ_COUNT ,
 NOT_SINGLE_PARENT_FAMILY_PERCENT , 
 CHILD_HEAD_FAMILY_UNADJ_COUNT , 
 CHILD_HEAD_FAMILY_ADJ_COUNT , 
 CHILD_HEAD_FAMILY_PERCENT  ) 
 SELECT 
	i_aggn_ref_id, 
	 ENTITY_ID , 
	 ENTITY_NAME ,  
	 INVALID_FAMILY_UNADJ_COUNT,
	 INVALID_FAMILY_ADJ_COUNT,
	 INVALID_FAMILY_PERCENT,
	 SINGLE_PARENT_FAMILY_UNADJ_COUNT,
	 SINGLE_PARENT_FAMILY_ADJ_COUNT,
	 SINGLE_PARENT_FAMILY_PERCENT,
	 NOT_SINGLE_PARENT_FAMILY_UNADJ_COUNT,
	 NOT_SINGLE_PARENT_FAMILY_ADJ_COUNT,
	 NOT_SINGLE_PARENT_FAMILY_PERCENT,
	 CHILD_HEAD_FAMILY_UNADJ_COUNT , 
	 CHILD_HEAD_FAMILY_ADJ_COUNT , 
	 CHILD_HEAD_FAMILY_PERCENT
 FROM CARS_801_TEMP_SINGLE_PARENT_TOT
 UNION ALL 
	 SELECT 
	 i_aggn_ref_id
	 ,0
	 ,'National'
	 , NAT_DT.NAT_INVALID_FAMILY_UNADJ_COUNT
	 , NAT_DT.NAT_INVALID_FAMILY_ADJ_COUNT
	 , CASE WHEN NAT_DT.NAT_FAM_ADJ_CNT >0 THEN ROUND(NAT_DT.NAT_INVALID_FAMILY_ADJ_COUNT/NAT_DT.NAT_FAM_ADJ_CNT*100,2) END 					NAT_INVALID_FAMILY_PERCENT
	 , NAT_DT.NAT_SINGLE_PARENT_FAMILY_UNADJ_COUNT
	 , NAT_DT.NAT_SINGLE_PARENT_FAMILY_ADJ_COUNT
	 , CASE WHEN NAT_DT.NAT_FAM_ADJ_CNT >0 THEN ROUND(NAT_DT.NAT_SINGLE_PARENT_FAMILY_ADJ_COUNT/NAT_DT.NAT_FAM_ADJ_CNT*100,2) END  				NAT_SINGLE_PARENT_FAMILY_PERCENT
	 , NAT_DT.NAT_NOT_SINGLE_PARENT_FAMILY_UNADJ_COUNT
	 , NAT_DT.NAT_NOT_SINGLE_PARENT_FAMILY_ADJ_COUNT
	 , CASE WHEN NAT_DT.NAT_FAM_ADJ_CNT >0 THEN ROUND(NAT_DT.NAT_NOT_SINGLE_PARENT_FAMILY_ADJ_COUNT/NAT_DT.NAT_FAM_ADJ_CNT*100,2) END 			NAT_NOT_SINGLE_PARENT_FAMILY_PERCENT
	 , NAT_DT.NAT_CHILD_HEAD_FAMILY_UNADJ_COUNT
	 , NAT_DT.NAT_CHILD_HEAD_FAMILY_ADJ_COUNT
	 , CASE WHEN NAT_DT.NAT_FAM_ADJ_CNT >0 THEN ROUND(NAT_DT.NAT_CHILD_HEAD_FAMILY_ADJ_COUNT/NAT_DT.NAT_FAM_ADJ_CNT*100,2) END 					NAT_CHILD_HEAD_FAMILY_PERCENT
	 FROM ( 
	 SELECT 
	   SUM(IFNULL(INVALID_FAMILY_UNADJ_COUNT,0)) 	  		AS NAT_INVALID_FAMILY_UNADJ_COUNT
	 , SUM(IFNULL(INVALID_FAMILY_ADJ_COUNT,0)) 		  		AS NAT_INVALID_FAMILY_ADJ_COUNT
	 , SUM(IFNULL(SINGLE_PARENT_FAMILY_UNADJ_COUNT,0)) 		AS NAT_SINGLE_PARENT_FAMILY_UNADJ_COUNT 
	 , SUM(IFNULL(SINGLE_PARENT_FAMILY_ADJ_COUNT,0)) 		AS NAT_SINGLE_PARENT_FAMILY_ADJ_COUNT
	 , SUM(IFNULL(NOT_SINGLE_PARENT_FAMILY_UNADJ_COUNT,0)) 	AS NAT_NOT_SINGLE_PARENT_FAMILY_UNADJ_COUNT
	 , SUM(IFNULL(NOT_SINGLE_PARENT_FAMILY_ADJ_COUNT,0)) 	AS NAT_NOT_SINGLE_PARENT_FAMILY_ADJ_COUNT
	 , SUM(IFNULL(CHILD_HEAD_FAMILY_UNADJ_COUNT,0))			AS NAT_CHILD_HEAD_FAMILY_UNADJ_COUNT
	 , SUM(IFNULL(CHILD_HEAD_FAMILY_ADJ_COUNT,0))			AS NAT_CHILD_HEAD_FAMILY_ADJ_COUNT
	 , (SUM(IFNULL(INVALID_FAMILY_ADJ_COUNT,0)) +
		SUM(IFNULL(SINGLE_PARENT_FAMILY_ADJ_COUNT,0)) + 
		SUM(IFNULL(NOT_SINGLE_PARENT_FAMILY_ADJ_COUNT,0)) +
		SUM(IFNULL(CHILD_HEAD_FAMILY_ADJ_COUNT,0))) 		AS NAT_FAM_ADJ_CNT 
	 FROM CARS_801_TEMP_SINGLE_PARENT_TOT ) NAT_DT
UNION ALL
	SELECT 
    i_aggn_ref_id
    ,E.ENTITY_ID		   
    ,E.ENTITY_NAME
    
	,NULL
	,NULL
	,NULL
	
    ,NULL
	,NULL
	,NULL
	
	,NULL
	,NULL
	,NULL
    
	,NULL
	,NULL
	,NULL
    
     FROM CARS_ENTITY E
          LEFT OUTER JOIN CARS_801_TEMP_SINGLE_PARENT_TOT C
     ON E.ENTITY_ID = C.ENTITY_ID
     WHERE E.ENTITY_TYPE_CD = 'STATE-TER'
     AND C.ENTITY_ID IS NULL ;
	
    
     
	SET v_total_rows_inserted = ROW_COUNT();

DROP TEMPORARY TABLE IF EXISTS TMP_MOD_HDR_M;
DROP TEMPORARY TABLE IF EXISTS CARS_801_TEMP_SINGLE_PARENT_SM;
DROP TEMPORARY TABLE IF EXISTS CARS_801_TEMP_SINGLE_PARENT_AVG;
DROP TEMPORARY TABLE IF EXISTS CARS_801_TEMP_SINGLE_PARENT_TOT;

UPDATE CARS_801_SP_LOG
SET SP_STATUS_TEXT= CONCAT('Success. Rows inserted: ',v_total_rows_inserted, ' Rows Deleted :', v_total_rows_deleted), END_TS=NOW()
 
WHERE  SP_LOG_ID=( SELECT MAX(SP_LOG_ID) FROM CARS_801_SP_LOG WHERE SP_NAME ='CARS_801_AGGN_SP_SINGLE_PARENT');
COMMIT;		
	
END$$
DELIMITER ;