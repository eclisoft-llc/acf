DELIMITER $$
CREATE OR REPLACE PROCEDURE CARS_801_AGGN_SP_INCOME_SOURCE( IN i_aggn_ref_id INT)
BEGIN
/******************************************************
 * Author: Zohreh Torabian
 * Report Name: Family Sources of Income
 * Report Number: 210
 * Desc: It populates data for table, 
 *		 CARS_801_AGGN_INCOME_SOURCE.
 ******************************************************/
DECLARE v_rec_cnt INTEGER DEFAULT 0 ;
DECLARE v_total_rows_deleted INTEGER DEFAULT 0; 
DECLARE v_total_rows_inserted INTEGER DEFAULT 0; 
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
			SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
			 
			UPDATE CARS_801_SP_LOG
				SET SP_STATUS_TEXT='Error',SP_LOG_MESSAGE_TEXT=@full_error,END_TS=NOW()
			WHERE SP_LOG_ID=(SELECT MAX(SP_LOG_ID)FROM CARS_801_SP_LOG WHERE SP_NAME='CARS_801_AGGN_SP_INCOME_SOURCE' );
			COMMIT;
		END;	
		
	INSERT INTO CARS_801_SP_LOG ( SP_NAME, START_TS)
		VALUES( 'CARS_801_AGGN_SP_INCOME_SOURCE', NOW());	
		
		
	SELECT COUNT(*) INTO v_rec_cnt FROM CARS_801_AGGN_INCOME_SOURCE WHERE  AGGN_REF_ID = i_aggn_ref_id;
 
		DELETE FROM CARS_801_AGGN_INCOME_SOURCE
		WHERE AGGN_REF_ID = i_aggn_ref_id;
        
		SET v_total_rows_deleted = ROW_COUNT();
		
	

CREATE TEMPORARY TABLE TMP_MOD_HDR_M AS
				    SELECT 	DISTINCT HDR.MODULE_HDR_ID 
						   
						   ,AGGN_REF_ID
						   ,HDR.ENTITY_ID
						   ,HDR.ENTITY_NAME	
						   ,HDR.FAMILY_COUNT AS FAM_MO_UNADJ_CNT
						   ,REC.FAMILY_COUNT AS FAMILY_CNT
						   ,AGGN_RF.FISCAL_YEAR 
							FROM CARS_MODULE_PERIOD_HDR HDR 
								JOIN CARS_PERIOD P 
							ON P.PERIOD_ID=HDR.PERIOD_ID 
							AND P.801_FLAG = 1
								JOIN CARS_801_REC_COUNTS REC
							ON REC.MODULE_HDR_ID=HDR.MODULE_HDR_ID
								JOIN CARS_801_AGGN_REF AGGN_RF 
							ON CAST(SUBSTR(P.PERIOD_DESC,5,4) AS INTEGER) =AGGN_RF.FISCAL_YEAR
							AND AGGN_RF.AGGN_REF_ID=i_aggn_ref_id;
							


                           
					 
DROP TEMPORARY TABLE IF EXISTS CARS_801_TEMP_INCOME_SRC_SM;
CREATE TEMPORARY TABLE CARS_801_TEMP_INCOME_SRC_SM 
    AS								
SELECT
       HDR.ENTITY_ID
        ,T.ENTITY_NAME
        ,T.FISCAL_YEAR
        /*EMPLOYMENT*/
		,SUM(HDR.FAM_MO_UNADJ_CNT) TOTAL_UNADJ_CNT_PER_STATE
		,AVG(HDR.FAM_MO_UNADJ_CNT) AVG_UNADJ_CNT_PER_STATE
		,AVG(IFNULL( T.EMP_Y_RATIO*HDR.FAM_MO_UNADJ_CNT,0)) 			WGHTD1AVG
        ,AVG(IFNULL(T.TANF_Y_RATIO*HDR.FAM_MO_UNADJ_CNT,0)) 			WGHTD2AVG
        /*HOUSING*/
        ,AVG(IFNULL(T.V_CASH_Y_RATIO*HDR.FAM_MO_UNADJ_CNT,0)) 			WGHTD3AVG
        /*FOOD STAMP*/
        ,AVG(IFNULL(T.F_STAMPS_Y_RATIO*HDR.FAM_MO_UNADJ_CNT,0)) 		WGHTD4AVG
        /*OTHER FED*/ 
        ,AVG(IFNULL(T.FED_INCOME_Y_RATIO*HDR.FAM_MO_UNADJ_CNT,0)) 		WGHTD5AVG
        ,AVG(IFNULL(T.ST_F_TANF_Y_RATIO*HDR.FAM_MO_UNADJ_CNT,0))     	WGHTD6AVG
		 /*EMPLOYMENT*/
        ,SUM(IFNULL( T.EMP_Y_RATIO*HDR.FAM_MO_UNADJ_CNT,0)) 			WGHTD1SUM
        ,SUM(IFNULL(T.TANF_Y_RATIO*HDR.FAM_MO_UNADJ_CNT,0)) 			WGHTD2SUM
        /*HOUSING*/
        ,SUM(IFNULL(T.V_CASH_Y_RATIO*HDR.FAM_MO_UNADJ_CNT,0)) 			WGHTD3SUM
        /*FOOD STAMP*/
        ,SUM(IFNULL(T.F_STAMPS_Y_RATIO*HDR.FAM_MO_UNADJ_CNT,0)) 		WGHTD4SUM
        /*OTHER FED*/ 
        ,SUM(IFNULL(T.FED_INCOME_Y_RATIO*HDR.FAM_MO_UNADJ_CNT,0)) 		WGHTD5SUM
        ,SUM(IFNULL(T.ST_F_TANF_Y_RATIO*HDR.FAM_MO_UNADJ_CNT,0))     	WGHTD6SUM

        FROM 
            (
     
                    SELECT  
                    FAM.MODULE_HDR_ID
                    ,HDR_M.ENTITY_NAME
                   
					,HDR_M.FISCAL_YEAR
                    , CASE WHEN HDR_M.FAMILY_CNT>0 THEN COUNT(CASE WHEN FAM.SELF_EMPLOYED_CD=1 THEN 1  END )/HDR_M.FAMILY_CNT ELSE 0 END  	EMP_Y_RATIO
                    , CASE WHEN HDR_M.FAMILY_CNT>0 THEN COUNT(CASE WHEN FAM.TANF_CD=1 THEN 1  END)/HDR_M.FAMILY_CNT ELSE 0 END				TANF_Y_RATIO		
                    , CASE WHEN HDR_M.FAMILY_CNT>0 THEN COUNT(CASE WHEN FAM.VOUCHER_OR_CASH_CD=1 THEN 1 END)/HDR_M.FAMILY_CNT ELSE 0 END	V_CASH_Y_RATIO
                    , CASE WHEN HDR_M.FAMILY_CNT>0 THEN COUNT(CASE WHEN FAM.FOOD_STAMPS_CD=1 THEN 1 END) /HDR_M.FAMILY_CNT 	ELSE 0 END		F_STAMPS_Y_RATIO	
                    , CASE WHEN HDR_M.FAMILY_CNT>0 THEN COUNT(CASE WHEN FAM.FEDERAL_INCOME_CD=1 THEN 1 END) /HDR_M.FAMILY_CNT  ELSE 0 END	FED_INCOME_Y_RATIO
                    , CASE WHEN HDR_M.FAMILY_CNT>0 THEN COUNT(CASE WHEN FAM.STATE_FUNDED_TANF_CD=1 THEN 1 END) /HDR_M.FAMILY_CNT ELSE 0 END	ST_F_TANF_Y_RATIO
                    FROM CARS_801_FAMILY FAM 
						JOIN TMP_MOD_HDR_M HDR_M
					ON FAM.MODULE_HDR_ID=HDR_M.MODULE_HDR_ID
					WHERE (SELF_EMPLOYED_CD=1 OR TANF_CD=1 OR  VOUCHER_OR_CASH_CD =1  OR FOOD_STAMPS_CD =1 OR  FEDERAL_INCOME_CD =1 OR STATE_FUNDED_TANF_CD =1)
                    GROUP BY 1,2,3
               
                 ) T
             
            
            JOIN ( SELECT DISTINCT MODULE_HDR_ID
									,ENTITY_ID
									,ENTITY_NAME
									,FISCAL_YEAR
									,FAM_MO_UNADJ_CNT  
									FROM TMP_MOD_HDR_M  ) HDR
            
            ON  T.MODULE_HDR_ID=HDR.MODULE_HDR_ID
			AND T.ENTITY_NAME=HDR.ENTITY_NAME
            AND T.FISCAL_YEAR=HDR.FISCAL_YEAR 
            GROUP BY 1,2,3;
            
 /* select * from CARS_801_TEMP_INCOME_SRC_SM;  */
 DROP TEMPORARY TABLE IF EXISTS CARS_801_TEMP_INCOME_TOT;
CREATE TEMPORARY TABLE CARS_801_TEMP_INCOME_TOT
	SELECT
		 INCOME_SRC.ENTITY_ID
		,INCOME_SRC.ENTITY_NAME
		
		
		
		/* income sources : 1- employment, 2- tanf, 3- voucher or cash , 4- food stamps 5- tanf moe 6- federal income or other */
		/* in this section, it uses formula to populate family unadjusted/adjusted count per state and fiscal year for each income source*/
		/* in this section, it uses formula to populate family count percentage per state and fiscal year for each for each income source*/
		/*employment*/
		,ROUND(INCOME_SRC.EMPLOYMENT_FAMILY_UNADJ_COUNT) EMPLOYMENT_FAMILY_UNADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN ROUND(INCOME_SRC.EMPLOYMENT_FAMILY_UNADJ_COUNT*FACT.PFACTOR) ELSE NULL END  EMPLOYMENT_FAMILY_ADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN INCOME_SRC.TOTAL_UNADJ_CNT_PER_STATE>0 THEN ROUND((INCOME_SRC.EMPLOYMENT_FAMILY_UNADJ_COUNT_S/INCOME_SRC.TOTAL_UNADJ_CNT_PER_STATE)*100,2) ELSE 0 END ELSE NULL END  EMPLOYMENT_FAMILY_PERCENT
		/*tanf*/
		, ROUND(INCOME_SRC.TANF_FAMILY_UNADJ_COUNT) TANF_FAMILY_UNADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN  ROUND(INCOME_SRC.TANF_FAMILY_UNADJ_COUNT*FACT.PFACTOR) ELSE NULL END TANF_FAMILY_ADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN INCOME_SRC.TOTAL_UNADJ_CNT_PER_STATE>0 THEN ROUND(( INCOME_SRC.TANF_FAMILY_UNADJ_COUNT_S/INCOME_SRC.TOTAL_UNADJ_CNT_PER_STATE)*100,2) ELSE 0 END ELSE NULL END TANF_FAMILY_PERCENT
		/*voucher or cash*/
        , ROUND(INCOME_SRC.VOUCHER_FAMILY_UNADJ_COUNT) VOUCHER_FAMILY_UNADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN ROUND(INCOME_SRC.VOUCHER_FAMILY_UNADJ_COUNT*FACT.PFACTOR) ELSE NULL END VOUCHER_FAMILY_ADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN INCOME_SRC.TOTAL_UNADJ_CNT_PER_STATE>0 THEN ROUND((INCOME_SRC.VOUCHER_FAMILY_UNADJ_COUNT_S/INCOME_SRC.TOTAL_UNADJ_CNT_PER_STATE)*100,2) ELSE 0 END ELSE NULL END VOUCHER_FAMILY_PERCENT
		/*food stamps*/
        , ROUND(INCOME_SRC.FOOD_STAMPS_FAMILY_UNADJ_COUNT) FOOD_STAMPS_FAMILY_UNADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN ROUND(INCOME_SRC.FOOD_STAMPS_FAMILY_UNADJ_COUNT*FACT.PFACTOR) ELSE NULL END FOOD_STAMPS_FAMILY_ADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN INCOME_SRC.TOTAL_UNADJ_CNT_PER_STATE>0 THEN ROUND((INCOME_SRC.FOOD_STAMPS_FAMILY_UNADJ_COUNT_S/INCOME_SRC.TOTAL_UNADJ_CNT_PER_STATE)*100,2) ELSE 0 END ELSE NULL END FOOD_STAMPS_FAMILY_PERCENT
		
		/*federal income or other*/
         , ROUND(INCOME_SRC.OTHER_FAMILY_UNADJ_COUNT) OTHER_FAMILY_UNADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN ROUND(INCOME_SRC.OTHER_FAMILY_UNADJ_COUNT*FACT.PFACTOR) ELSE NULL END OTHER_FAMILY_ADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN INCOME_SRC.TOTAL_UNADJ_CNT_PER_STATE>0 THEN ROUND((INCOME_SRC.OTHER_FAMILY_UNADJ_COUNT_S/INCOME_SRC.TOTAL_UNADJ_CNT_PER_STATE)*100,2) ELSE 0 END ELSE NULL END OTHER_FAMILY_PERCENT 
		/*state funded tanf*/
		,ROUND(INCOME_SRC.TANF_MOE_FAMILY_UNADJ_COUNT) TANF_MOE_FAMILY_UNADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN ROUND(INCOME_SRC.TANF_MOE_FAMILY_UNADJ_COUNT*FACT.PFACTOR) ELSE NULL END TANF_MOE_FAMILY_ADJ_COUNT
		,CASE WHEN FACT.PFACTOR>0 THEN CASE WHEN INCOME_SRC.TOTAL_UNADJ_CNT_PER_STATE>0 THEN ROUND((INCOME_SRC.TANF_MOE_FAMILY_UNADJ_COUNT_S/INCOME_SRC.TOTAL_UNADJ_CNT_PER_STATE)*100,2) ELSE 0 END ELSE NULL END TANF_MOE_FAMILY_PERCENT
		,CASE WHEN FACT.PFACTOR>0 THEN AVG_UNADJ_CNT_PER_STATE*FACT.PFACTOR ELSE NULL END  FAMADJCNT
	FROM ( SELECT ENTITY_ID
				  ,ENTITY_NAME
				  ,FISCAL_YEAR 
				  ,WGHTD1AVG EMPLOYMENT_FAMILY_UNADJ_COUNT
				  ,WGHTD2AVG TANF_FAMILY_UNADJ_COUNT
				  ,WGHTD3AVG VOUCHER_FAMILY_UNADJ_COUNT 
				  ,WGHTD4AVG FOOD_STAMPS_FAMILY_UNADJ_COUNT
				  ,WGHTD5AVG OTHER_FAMILY_UNADJ_COUNT
				  ,WGHTD6AVG TANF_MOE_FAMILY_UNADJ_COUNT
				  ,WGHTD1SUM EMPLOYMENT_FAMILY_UNADJ_COUNT_S
                  ,WGHTD2SUM TANF_FAMILY_UNADJ_COUNT_S
                  ,WGHTD3SUM VOUCHER_FAMILY_UNADJ_COUNT_S
                  ,WGHTD4SUM FOOD_STAMPS_FAMILY_UNADJ_COUNT_S
                  ,WGHTD5SUM OTHER_FAMILY_UNADJ_COUNT_S
                  ,WGHTD6SUM TANF_MOE_FAMILY_UNADJ_COUNT_S
				  ,TOTAL_UNADJ_CNT_PER_STATE
				  ,AVG_UNADJ_CNT_PER_STATE
				
				  FROM CARS_801_TEMP_INCOME_SRC_SM) INCOME_SRC
		 
	
		LEFT JOIN ( SELECT ENTITY_ID
						,ENTITY_NAME
						,PERIOD_DESC
						,IFNULL(POOLING_FACTOR,0)*.01 AS PFACTOR 
						FROM VW_CARS_801_POOLING_FACTOR 
				  ) FACT
     						
	ON FACT.PERIOD_DESC LIKE CONCAT('%',INCOME_SRC.FISCAL_YEAR)
	AND FACT.ENTITY_NAME=INCOME_SRC.ENTITY_NAME
	AND FACT.ENTITY_ID=INCOME_SRC.ENTITY_ID;

	
/* select * from CARS_801_TEMP_INCOME_TOT; */
INSERT INTO CARS_801_AGGN_INCOME_SOURCE
(
 AGGN_REF_ID , 
 ENTITY_ID , 
 ENTITY_NAME , 
 EMPLOYMENT_FAMILY_UNADJ_COUNT ,
 EMPLOYMENT_FAMILY_ADJ_COUNT , 
 EMPLOYMENT_FAMILY_PERCENT , 
 TANF_FAMILY_UNADJ_COUNT , 
 TANF_FAMILY_ADJ_COUNT , 
 TANF_FAMILY_PERCENT , 
 TANF_MOE_FAMILY_UNADJ_COUNT , 
 TANF_MOE_FAMILY_ADJ_COUNT , 
 TANF_MOE_FAMILY_PERCENT , 
 VOUCHER_FAMILY_UNADJ_COUNT , 
 VOUCHER_FAMILY_ADJ_COUNT , 
 VOUCHER_FAMILY_PERCENT , 
 FOOD_STAMPS_FAMILY_UNADJ_COUNT , 
 FOOD_STAMPS_FAMILY_ADJ_COUNT , 
 FOOD_STAMPS_FAMILY_PERCENT , 
 OTHER_FAMILY_UNADJ_COUNT , 
 OTHER_FAMILY_ADJ_COUNT , 
 OTHER_FAMILY_PERCENT 

)
SELECT
 i_aggn_ref_id, 
 ENTITY_ID , 
 ENTITY_NAME ,  
 EMPLOYMENT_FAMILY_UNADJ_COUNT,
 EMPLOYMENT_FAMILY_ADJ_COUNT, 
 EMPLOYMENT_FAMILY_PERCENT, 
 TANF_FAMILY_UNADJ_COUNT, 
 TANF_FAMILY_ADJ_COUNT, 
 TANF_FAMILY_PERCENT, 
 TANF_MOE_FAMILY_UNADJ_COUNT, 
 TANF_MOE_FAMILY_ADJ_COUNT, 
 TANF_MOE_FAMILY_PERCENT, 
 VOUCHER_FAMILY_UNADJ_COUNT, 
 VOUCHER_FAMILY_ADJ_COUNT, 
 VOUCHER_FAMILY_PERCENT, 
 FOOD_STAMPS_FAMILY_UNADJ_COUNT, 
 FOOD_STAMPS_FAMILY_ADJ_COUNT, 
 FOOD_STAMPS_FAMILY_PERCENT, 
 OTHER_FAMILY_UNADJ_COUNT, 
 OTHER_FAMILY_ADJ_COUNT, 
 OTHER_FAMILY_PERCENT
 FROM CARS_801_TEMP_INCOME_TOT
 UNION ALL 
 SELECT 
 i_aggn_ref_id
 ,0
 ,'National',
 NAT_DT.NAT_EMPLOYMENT_FAMILY_UNADJ_COUNT,
 NAT_DT.NAT_EMPLOYMENT_FAMILY_ADJ_COUNT,
 CASE WHEN NAT_DT.TOTAL_ADJ_CNT>0 THEN  ROUND(NAT_DT.NAT_EMPLOYMENT_FAMILY_ADJ_COUNT/NAT_DT.TOTAL_ADJ_CNT*100,2) ELSE 0 END 		NAT_EMPLOYMENT_FAMILY_PERCENT,
 NAT_DT.NAT_TANF_FAMILY_UNADJ_COUNT,
  NAT_DT.NAT_TANF_FAMILY_ADJ_COUNT,
 CASE WHEN NAT_DT.TOTAL_ADJ_CNT>0 THEN ROUND(NAT_DT.NAT_TANF_FAMILY_ADJ_COUNT/NAT_DT.TOTAL_ADJ_CNT*100,2) ELSE 0 END 				NAT_TANF_FAMILY_PERCENT,
 NAT_DT.NAT_TANF_MOE_FAMILY_UNADJ_COUNT,
 NAT_DT.NAT_TANF_MOE_FAMILY_ADJ_COUNT,
 CASE WHEN NAT_DT.TOTAL_ADJ_CNT>0 THEN  ROUND(NAT_DT.NAT_TANF_MOE_FAMILY_ADJ_COUNT/NAT_DT.TOTAL_ADJ_CNT*100,2) ELSE 0 END 			NAT_TANF_MOE_FAMILY_PERCENT,
 NAT_DT.NAT_VOUCHER_FAMILY_UNADJ_COUNT,
 NAT_DT.NAT_VOUCHER_FAMILY_ADJ_COUNT,
 CASE WHEN NAT_DT.TOTAL_ADJ_CNT>0 THEN ROUND(NAT_DT.NAT_VOUCHER_FAMILY_ADJ_COUNT/NAT_DT.TOTAL_ADJ_CNT*100,2) ELSE 0 END  			MAT_VOUCHER_FAMILY_PERCENT,
 NAT_DT.NAT_FOOD_STAMPS_FAMILY_UNADJ_COUNT,
 NAT_DT.NAT_FOOD_STAMPS_FAMILY_ADJ_COUNT,
 CASE WHEN NAT_DT.TOTAL_ADJ_CNT>0 THEN ROUND(NAT_DT.NAT_FOOD_STAMPS_FAMILY_ADJ_COUNT/NAT_DT.TOTAL_ADJ_CNT*100,2) ELSE 0 END 		NAT_FOOD_STAMPS_FAMILY_PERCENT,
 NAT_DT.NAT_OTHER_FAMILY_UNADJ_COUNT,
 NAT_DT.NAT_OTHER_FAMILY_ADJ_COUNT,
 CASE WHEN NAT_DT.TOTAL_ADJ_CNT>0 THEN  ROUND(NAT_DT.NAT_OTHER_FAMILY_ADJ_COUNT/NAT_DT.TOTAL_ADJ_CNT*100 ,2) ELSE 0 END 			NAT_OTHER_FAMILY_PERCENT
 FROM ( 
 SELECT 
	 SUM(IFNULL(EMPLOYMENT_FAMILY_UNADJ_COUNT,0)) 		NAT_EMPLOYMENT_FAMILY_UNADJ_COUNT ,
	 SUM(IFNULL(EMPLOYMENT_FAMILY_ADJ_COUNT,0)) 		NAT_EMPLOYMENT_FAMILY_ADJ_COUNT,
	 SUM(IFNULL(TANF_FAMILY_UNADJ_COUNT,0)) 			NAT_TANF_FAMILY_UNADJ_COUNT,
	 SUM(IFNULL(TANF_FAMILY_ADJ_COUNT,0)) 				NAT_TANF_FAMILY_ADJ_COUNT,
	 SUM(IFNULL(TANF_MOE_FAMILY_UNADJ_COUNT,0))   		NAT_TANF_MOE_FAMILY_UNADJ_COUNT,
	 SUM(IFNULL(TANF_MOE_FAMILY_ADJ_COUNT,0)) 			NAT_TANF_MOE_FAMILY_ADJ_COUNT,
	 SUM(IFNULL(VOUCHER_FAMILY_UNADJ_COUNT,0)) 			NAT_VOUCHER_FAMILY_UNADJ_COUNT,
	 SUM(IFNULL(VOUCHER_FAMILY_ADJ_COUNT,0))			NAT_VOUCHER_FAMILY_ADJ_COUNT,
	 SUM(IFNULL(FOOD_STAMPS_FAMILY_UNADJ_COUNT,0))		NAT_FOOD_STAMPS_FAMILY_UNADJ_COUNT,
	 SUM(IFNULL(FOOD_STAMPS_FAMILY_ADJ_COUNT,0))		NAT_FOOD_STAMPS_FAMILY_ADJ_COUNT,
	 SUM(IFNULL(OTHER_FAMILY_UNADJ_COUNT ,0))			NAT_OTHER_FAMILY_UNADJ_COUNT,
	 SUM(IFNULL(OTHER_FAMILY_ADJ_COUNT,0))				NAT_OTHER_FAMILY_ADJ_COUNT,
	 
	 SUM(FAMADJCNT) TOTAL_ADJ_CNT
FROM CARS_801_TEMP_INCOME_TOT) NAT_DT
UNION ALL
	SELECT 
    i_aggn_ref_id
    ,E.ENTITY_ID		   
    ,E.ENTITY_NAME
    
	,NULL
	,NULL
	,NULL
	
    ,NULL
	,NULL
	,NULL
	
	,NULL
	,NULL
	,NULL
    
	,NULL
	,NULL
	,NULL
    
	,NULL
	,NULL
	,NULL
    
	,NULL
	,NULL
	,NULL
    
    
     FROM CARS_ENTITY E
          LEFT OUTER JOIN CARS_801_TEMP_INCOME_TOT C
     ON E.ENTITY_ID = C.ENTITY_ID
     WHERE E.ENTITY_TYPE_CD = 'STATE-TER'
     AND C.ENTITY_ID IS NULL ; 
	
SET v_total_rows_inserted = ROW_COUNT();		
UPDATE CARS_801_SP_LOG
SET SP_STATUS_TEXT= CONCAT('Success. Rows inserted: ',v_total_rows_inserted, ' Rows Deleted :', v_total_rows_deleted), END_TS=NOW()
WHERE  SP_LOG_ID=( SELECT MAX(SP_LOG_ID) FROM CARS_801_SP_LOG WHERE SP_NAME ='CARS_801_AGGN_SP_INCOME_SOURCE');

DROP TEMPORARY TABLE IF EXISTS TMP_MOD_HDR_M;
DROP TEMPORARY TABLE IF EXISTS CARS_801_TEMP_INCOME_SRC_SM;
DROP TEMPORARY TABLE IF EXISTS CARS_801_TEMP_INCOME_TOT;
 

COMMIT;		
	
END$$
DELIMITER ;