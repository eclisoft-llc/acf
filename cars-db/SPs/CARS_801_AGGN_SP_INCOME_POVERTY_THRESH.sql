DELIMITER $$
CREATE OR REPLACE PROCEDURE CARS_801_AGGN_SP_INCOME_POVERTY_THRESH( IN i_aggn_ref_id INT)
BEGIN

DECLARE v_rec_cnt INTEGER DEFAULT 0 ;
DECLARE v_total_rows_deleted INTEGER DEFAULT 0; 
DECLARE v_total_rows_inserted INTEGER DEFAULT 0; 
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
			SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
			 
			UPDATE CARS_801_SP_LOG
				SET SP_STATUS_TEXT='Error',SP_LOG_MESSAGE_TEXT=@full_error,END_TS=NOW()
			WHERE SP_LOG_ID=(SELECT MAX(SP_LOG_ID)FROM CARS_801_SP_LOG WHERE SP_NAME='CARS_801_AGGN_SP_INCOME_POVERTY_THRESH' );
			COMMIT;
		END;	
		
	INSERT INTO CARS_801_SP_LOG ( SP_NAME, START_TS)
		VALUES( 'CARS_801_AGGN_SP_INCOME_POVERTY_THRESH', NOW());	
		
		
	SELECT COUNT(*) INTO v_rec_cnt FROM CARS_801_AGGN_INCOME_POVERTY_THRESH WHERE  AGGN_REF_ID = i_aggn_ref_id;
 
		DELETE FROM CARS_801_AGGN_INCOME_POVERTY_THRESH
		WHERE AGGN_REF_ID = i_aggn_ref_id;
        
		SET v_total_rows_deleted = ROW_COUNT();
		
		
		
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_INIT_THRESH;
CREATE TEMPORARY TABLE CARS_TMP_INCOME_POVERTY_INIT_THRESH AS  
SELECT
    H.MODULE_HDR_ID, 
	H.ENTITY_NAME, 
	H.ENTITY_ID,
	F.POOLING_FACTOR,
	R.FISCAL_YEAR, 
	H.FAMILY_COUNT AS FAMILY_HDR_COUNT, 
	C.FAMILY_COUNT AS FAMILY_REC_COUNT,
	SR.POPULATION_SAMPLE_CODE
FROM CARS_MODULE_PERIOD_HDR H
JOIN CARS_PERIOD P
ON H.PERIOD_ID = P.PERIOD_ID
AND 801_FLAG = 1
JOIN CARS_801_AGGN_REF R
ON CAST(SUBSTR(P.PERIOD_DESC, 5, 4) AS INTEGER) = R.FISCAL_YEAR
AND R.AGGN_REF_ID = i_aggn_ref_id
JOIN CARS_801_REC_COUNTS C
ON H.MODULE_HDR_ID = C.MODULE_HDR_ID
JOIN VW_CARS_801_POOLING_FACTOR F
ON SUBSTR(P.PERIOD_DESC, 2, 7) = F.PERIOD_DESC
AND H.ENTITY_ID = F.ENTITY_ID
JOIN CARS_801_STATE_REF SR
ON H.ENTITY_ID = SR.ENTITY_ID
AND SUBSTR(P.PERIOD_DESC, 5, 4) = SR.FISCAL_YEAR
;


DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_UNADJ_DATA1_THRESH;
CREATE TEMPORARY TABLE CARS_TMP_INCOME_POVERTY_UNADJ_DATA1_THRESH AS  
SELECT
MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, FAMILY_ID, REASON_CD, TOTAL_MONTHLY_COPAYMENT,
MONTHLY_INCOME, FAMILY_SIZE, INVALID_OR_PROT_SVC_IND, CASE WHEN INVALID_OR_PROT_SVC_IND = 'P' THEN 'P' ELSE NULL END AS PROTECTIVE_SVC, 
CASE WHEN INVALID_OR_PROT_SVC_IND = 'I' THEN 'I' ELSE NULL END AS INVALID_FAM,
ROUND(
	(MONTHLY_INCOME / 
(POVERTY_AMOUNT / 12)) * 100, 2) AS POV_PCT	

	FROM 
	(
		SELECT H.MODULE_HDR_ID, H.ENTITY_ID, H.ENTITY_NAME, F.FAMILY_ID, F.REASON_CD, F.TOTAL_MONTHLY_COPAYMENT,
		MONTHLY_INCOME, FAMILY_SIZE, 
		CASE 
		WHEN E.FAMILY_SIZE_ERR IS NULL AND TOTAL_MONTHLY_COPAYMENT <= MONTHLY_INCOME AND MONTHLY_INCOME = 0 AND REASON_CD IS NOT NULL
		AND REASON_CD NOT IN (4,9) THEN 'Z'
		WHEN E.FAMILY_SIZE_ERR IS NOT NULL OR E.TOTAL_MONTHLY_COPAYMENT_ERR IS NOT NULL OR E.MONTHLY_INCOME_ERR IS NOT NULL OR REASON_CD IS NULL THEN 'I'
		WHEN F.REASON_CD IN (4,9) THEN 'P'
		ELSE NULL END AS INVALID_OR_PROT_SVC_IND,
		CASE 
			WHEN FAMILY_SIZE = 1 THEN SIZE_1_AMOUNT
			WHEN FAMILY_SIZE = 2 THEN SIZE_2_AMOUNT
			WHEN FAMILY_SIZE = 3 THEN SIZE_3_AMOUNT
			WHEN FAMILY_SIZE = 4 THEN SIZE_4_AMOUNT
			WHEN FAMILY_SIZE = 5 THEN SIZE_5_AMOUNT
			WHEN FAMILY_SIZE = 6 THEN SIZE_6_AMOUNT
			WHEN FAMILY_SIZE = 7 THEN SIZE_7_AMOUNT
			WHEN FAMILY_SIZE = 8 THEN SIZE_8_AMOUNT
			WHEN FAMILY_SIZE > 8 THEN SIZE_GE9_AMOUNT
		ELSE NULL END AS POVERTY_AMOUNT
			
		FROM CARS_MODULE_PERIOD_HDR H
		JOIN CARS_PERIOD P
		ON H.PERIOD_ID = P.PERIOD_ID
		AND 801_FLAG = 1
		JOIN CARS_801_AGGN_REF R
		ON CAST(SUBSTR(P.PERIOD_DESC, 5, 4) AS INTEGER) = R.FISCAL_YEAR
		AND R.AGGN_REF_ID = i_aggn_ref_id
		JOIN CARS_801_REC_COUNTS RC
		ON H.MODULE_HDR_ID = RC.MODULE_HDR_ID
		JOIN CARS_801_FAMILY F
		ON H.MODULE_HDR_ID = F.MODULE_HDR_ID
		LEFT OUTER JOIN CARS_801_FAMILY_ERR E
		ON F.FAMILY_ID = E.FAMILY_ID
		JOIN CARS_801_POVERTY_THRESH V
		ON SUBSTR(F.REP_YYYYMM, 1, 4) = V.CALENDAR_YEAR
	) C
;



DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_UNADJ_DATA_THRESH;
CREATE TEMPORARY TABLE CARS_TMP_INCOME_POVERTY_UNADJ_DATA_THRESH AS  
SELECT
A.MODULE_HDR_ID, A.ENTITY_ID, A.ENTITY_NAME, POOLING_FACTOR,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (PROT_SRVC / FAMILY_REC_COUNT) * FAMILY_HDR_COUNT ELSE PROT_SRVC END AS PROT_SRVC,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (INVALID / FAMILY_REC_COUNT) * FAMILY_HDR_COUNT ELSE INVALID END AS INVALID,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (ZERO_INCOME / FAMILY_REC_COUNT) * FAMILY_HDR_COUNT ELSE ZERO_INCOME END AS ZERO_INCOME,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (INCOME_0_25 / FAMILY_REC_COUNT) * FAMILY_HDR_COUNT ELSE INCOME_0_25 END AS INCOME_0_25,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (INCOME_25_50 / FAMILY_REC_COUNT) * FAMILY_HDR_COUNT ELSE INCOME_25_50 END AS INCOME_25_50,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (INCOME_50_75 / FAMILY_REC_COUNT) * FAMILY_HDR_COUNT ELSE INCOME_50_75 END AS INCOME_50_75,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (INCOME_75_100 / FAMILY_REC_COUNT) * FAMILY_HDR_COUNT ELSE INCOME_75_100 END AS INCOME_75_100,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (INCOME_100_125 / FAMILY_REC_COUNT) * FAMILY_HDR_COUNT ELSE INCOME_100_125 END AS INCOME_100_125,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (INCOME_125_150 / FAMILY_REC_COUNT) * FAMILY_HDR_COUNT ELSE INCOME_125_150 END AS INCOME_125_150,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (INCOME_150_175 / FAMILY_REC_COUNT) * FAMILY_HDR_COUNT ELSE INCOME_150_175 END AS INCOME_150_175,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (INCOME_GE_175 / FAMILY_REC_COUNT) * FAMILY_HDR_COUNT ELSE INCOME_GE_175 END AS INCOME_GE_175
FROM
	(
	SELECT
	MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME,FAMILY_ID,
	SUM(CASE WHEN PROTECTIVE_SVC = 'P' THEN 1 ELSE 0 END) AS PROT_SRVC,
	SUM(CASE WHEN INVALID_FAM = 'I' THEN 1 ELSE 0 END) INVALID,
	SUM(CASE WHEN INVALID_OR_PROT_SVC_IND = 'Z' THEN 1 ELSE 0 END) AS ZERO_INCOME,
	/*SUM(CASE WHEN PROTECTIVE_SVC IS NULL AND INVALID_FAM IS NULL AND MONTHLY_INCOME = 0 THEN 1 ELSE 0 END) AS ZERO_INCOME,*/
	SUM(CASE WHEN PROTECTIVE_SVC IS NULL AND INVALID_FAM IS NULL AND POV_PCT > 0 AND POV_PCT < 25 THEN 1 ELSE 0 END) AS INCOME_0_25,
	SUM(CASE WHEN PROTECTIVE_SVC IS NULL AND INVALID_FAM IS NULL AND POV_PCT >= 25 AND POV_PCT < 50 THEN 1 ELSE 0 END) AS INCOME_25_50,
	SUM(CASE WHEN PROTECTIVE_SVC IS NULL AND INVALID_FAM IS NULL AND POV_PCT >=50 AND POV_PCT < 75 THEN 1 ELSE 0 END) AS INCOME_50_75,
	SUM(CASE WHEN PROTECTIVE_SVC IS NULL AND INVALID_FAM IS NULL AND POV_PCT >= 75 AND POV_PCT < 100 THEN 1 ELSE 0 END) AS INCOME_75_100,
	SUM(CASE WHEN PROTECTIVE_SVC IS NULL AND INVALID_FAM IS NULL AND POV_PCT >= 100 AND POV_PCT < 125 THEN 1 ELSE 0 END) AS INCOME_100_125,
	SUM(CASE WHEN PROTECTIVE_SVC IS NULL AND INVALID_FAM IS NULL AND POV_PCT >= 125 AND POV_PCT < 150 THEN 1 ELSE 0 END) AS INCOME_125_150,
	SUM(CASE WHEN PROTECTIVE_SVC IS NULL AND INVALID_FAM IS NULL AND POV_PCT >= 150 AND POV_PCT < 175 THEN 1 ELSE 0 END) AS INCOME_150_175,
	SUM(CASE WHEN PROTECTIVE_SVC IS NULL AND INVALID_FAM IS NULL AND POV_PCT >= 175 THEN 1 ELSE 0 END) AS INCOME_GE_175
	FROM CARS_TMP_INCOME_POVERTY_UNADJ_DATA1_THRESH
	GROUP BY MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME
	) A
JOIN CARS_TMP_INCOME_POVERTY_INIT_THRESH I
ON A.MODULE_HDR_ID = I.MODULE_HDR_ID
;



DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_ADJ_DATA_THRESH;
CREATE TEMPORARY TABLE CARS_TMP_INCOME_POVERTY_ADJ_DATA_THRESH AS  
SELECT
MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME,
PROT_SRVC_UNADJ_CNT, PROT_SRVC_ADJ_CNT,
INVALID_UNADJ_CNT, INVALID_ADJ_CNT,
ZERO_INCOME_UNADJ_CNT, ZERO_INCOME_ADJ_CNT,
INCOME_0_25_UNADJ_CNT, INCOME_0_25_ADJ_CNT, 
INCOME_25_50_UNADJ_CNT, INCOME_25_50_ADJ_CNT, 
INCOME_50_75_UNADJ_CNT, INCOME_50_75_ADJ_CNT,
INCOME_75_100_UNADJ_CNT, INCOME_75_100_ADJ_CNT,
INCOME_100_125_UNADJ_CNT, INCOME_100_125_ADJ_CNT,
INCOME_125_150_UNADJ_CNT, INCOME_125_150_ADJ_CNT, 
INCOME_150_175_UNADJ_CNT, INCOME_150_175_ADJ_CNT,
INCOME_GE_175_UNADJ_CNT, INCOME_GE_175_ADJ_CNT,

PROT_SRVC_UNADJ_CNT + INVALID_UNADJ_CNT + ZERO_INCOME_UNADJ_CNT + INCOME_0_25_UNADJ_CNT + INCOME_25_50_UNADJ_CNT + INCOME_50_75_UNADJ_CNT  +
INCOME_75_100_UNADJ_CNT + INCOME_100_125_UNADJ_CNT + INCOME_125_150_UNADJ_CNT + INCOME_150_175_UNADJ_CNT + INCOME_GE_175_UNADJ_CNT AS TOT_UNADJ_CNT, 

PROT_SRVC_ADJ_CNT + INVALID_ADJ_CNT + ZERO_INCOME_ADJ_CNT + INCOME_0_25_ADJ_CNT + INCOME_25_50_ADJ_CNT + INCOME_50_75_ADJ_CNT  +
INCOME_75_100_ADJ_CNT + INCOME_100_125_ADJ_CNT + INCOME_125_150_ADJ_CNT + INCOME_150_175_ADJ_CNT + INCOME_GE_175_ADJ_CNT AS TOT_ADJ_CNT


FROM 
(

		SELECT
		MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME,
		PROT_SRVC AS PROT_SRVC_UNADJ_CNT, INVALID AS INVALID_UNADJ_CNT, 
		ZERO_INCOME AS ZERO_INCOME_UNADJ_CNT, INCOME_0_25 AS INCOME_0_25_UNADJ_CNT, 
		INCOME_25_50 AS INCOME_25_50_UNADJ_CNT, INCOME_50_75 AS INCOME_50_75_UNADJ_CNT, 
		INCOME_75_100 AS INCOME_75_100_UNADJ_CNT, INCOME_100_125 AS INCOME_100_125_UNADJ_CNT, 
		INCOME_125_150 AS INCOME_125_150_UNADJ_CNT, INCOME_150_175 AS INCOME_150_175_UNADJ_CNT, 
		INCOME_GE_175 AS INCOME_GE_175_UNADJ_CNT,
		
		PROT_SRVC * POOLING_FACTOR * .01 AS PROT_SRVC_ADJ_CNT,
		INVALID  * POOLING_FACTOR * .01 AS INVALID_ADJ_CNT,
		ZERO_INCOME * POOLING_FACTOR * .01 AS ZERO_INCOME_ADJ_CNT,
		INCOME_0_25 * POOLING_FACTOR * .01 AS INCOME_0_25_ADJ_CNT,
		INCOME_25_50 * POOLING_FACTOR * .01 AS INCOME_25_50_ADJ_CNT,
		INCOME_50_75 * POOLING_FACTOR * .01 AS INCOME_50_75_ADJ_CNT,
		INCOME_75_100 * POOLING_FACTOR * .01 AS INCOME_75_100_ADJ_CNT,
		INCOME_100_125 * POOLING_FACTOR * .01 AS INCOME_100_125_ADJ_CNT,
		INCOME_125_150 * POOLING_FACTOR * .01 AS INCOME_125_150_ADJ_CNT,
		INCOME_150_175 * POOLING_FACTOR * .01 AS INCOME_150_175_ADJ_CNT,
		INCOME_GE_175 * POOLING_FACTOR * .01 AS INCOME_GE_175_ADJ_CNT
		
		FROM CARS_TMP_INCOME_POVERTY_UNADJ_DATA_THRESH
) A
;
		
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_AVG_THRESH;
CREATE TEMPORARY TABLE CARS_TMP_INCOME_POVERTY_AVG_THRESH AS  
SELECT
ENTITY_ID, ENTITY_NAME,		
ROUND(AVG(PROT_SRVC_UNADJ_CNT), 0) AS PROT_SRVC_UNADJ_CNT, ROUND(AVG(PROT_SRVC_ADJ_CNT), 0) AS PROT_SRVC_ADJ_CNT, 
ROUND(AVG(INVALID_UNADJ_CNT), 0) AS INVALID_UNADJ_CNT, ROUND(AVG(INVALID_ADJ_CNT), 0) AS INVALID_ADJ_CNT,
ROUND(AVG(ZERO_INCOME_UNADJ_CNT), 0) AS ZERO_INCOME_UNADJ_CNT, ROUND(AVG(ZERO_INCOME_ADJ_CNT), 0) AS ZERO_INCOME_ADJ_CNT, 
ROUND(AVG(INCOME_0_25_UNADJ_CNT), 0) AS INCOME_0_25_UNADJ_CNT, ROUND(AVG(INCOME_0_25_ADJ_CNT), 0) AS INCOME_0_25_ADJ_CNT,
ROUND(AVG(INCOME_25_50_UNADJ_CNT), 0) AS INCOME_25_50_UNADJ_CNT, ROUND(AVG(INCOME_25_50_ADJ_CNT), 0) AS INCOME_25_50_ADJ_CNT, 
ROUND(AVG(INCOME_50_75_UNADJ_CNT), 0) AS INCOME_50_75_UNADJ_CNT, ROUND(AVG(INCOME_50_75_ADJ_CNT), 0) AS INCOME_50_75_ADJ_CNT,
ROUND(AVG(INCOME_75_100_UNADJ_CNT), 0) AS INCOME_75_100_UNADJ_CNT, ROUND(AVG(INCOME_75_100_ADJ_CNT), 0) AS INCOME_75_100_ADJ_CNT, 
ROUND(AVG(INCOME_100_125_UNADJ_CNT), 0) AS INCOME_100_125_UNADJ_CNT, ROUND(AVG(INCOME_100_125_ADJ_CNT), 0) AS INCOME_100_125_ADJ_CNT,
ROUND(AVG(INCOME_125_150_UNADJ_CNT), 0) AS INCOME_125_150_UNADJ_CNT, ROUND(AVG(INCOME_125_150_ADJ_CNT), 0) AS INCOME_125_150_ADJ_CNT,
ROUND(AVG(INCOME_150_175_UNADJ_CNT), 0) AS INCOME_150_175_UNADJ_CNT, ROUND(AVG(INCOME_150_175_ADJ_CNT), 0) AS INCOME_150_175_ADJ_CNT, 
ROUND(AVG(INCOME_GE_175_UNADJ_CNT), 0) AS INCOME_GE_175_UNADJ_CNT, ROUND(AVG(INCOME_GE_175_ADJ_CNT), 0) AS INCOME_GE_175_ADJ_CNT,

ROUND(AVG(PROT_SRVC_UNADJ_CNT), 0) + ROUND(AVG(INVALID_UNADJ_CNT), 0) + ROUND(AVG(ZERO_INCOME_UNADJ_CNT), 0) + ROUND(AVG(INCOME_0_25_UNADJ_CNT), 0) + 
ROUND(AVG(INCOME_25_50_UNADJ_CNT), 0) + ROUND(AVG(INCOME_50_75_UNADJ_CNT), 0) + ROUND(AVG(INCOME_75_100_UNADJ_CNT), 0) + ROUND(AVG(INCOME_100_125_UNADJ_CNT), 0) + 
ROUND(AVG(INCOME_125_150_UNADJ_CNT), 0) + ROUND(AVG(INCOME_150_175_UNADJ_CNT), 0) + ROUND(AVG(INCOME_GE_175_UNADJ_CNT), 0)
AS TOT_UNADJ_CNT, 

ROUND(AVG(PROT_SRVC_ADJ_CNT), 0) + ROUND(AVG(INVALID_ADJ_CNT), 0) + ROUND(AVG(ZERO_INCOME_ADJ_CNT), 0) + ROUND(AVG(INCOME_0_25_ADJ_CNT), 0) + 
ROUND(AVG(INCOME_25_50_ADJ_CNT), 0) + ROUND(AVG(INCOME_50_75_ADJ_CNT), 0) + ROUND(AVG(INCOME_75_100_ADJ_CNT), 0) + ROUND(AVG(INCOME_100_125_ADJ_CNT), 0) + 
ROUND(AVG(INCOME_125_150_ADJ_CNT), 0) + ROUND(AVG(INCOME_150_175_ADJ_CNT), 0) + ROUND(AVG(INCOME_GE_175_ADJ_CNT), 0)
AS TOT_ADJ_CNT 

FROM CARS_TMP_INCOME_POVERTY_ADJ_DATA_THRESH
GROUP BY ENTITY_ID, ENTITY_NAME;


DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_NATIONAL_THRESH;
CREATE TEMPORARY TABLE CARS_TMP_INCOME_POVERTY_NATIONAL_THRESH AS  
SELECT
0 AS ENTITY_ID, 'National' AS ENTITY_NAME,
SUM(PROT_SRVC_UNADJ_CNT) AS PROT_SRVC_UNADJ_CNT, SUM(PROT_SRVC_ADJ_CNT) AS PROT_SRVC_ADJ_CNT,
SUM(INVALID_UNADJ_CNT) AS INVALID_UNADJ_CNT, SUM(INVALID_ADJ_CNT) AS INVALID_ADJ_CNT,
SUM(ZERO_INCOME_UNADJ_CNT) AS ZERO_INCOME_UNADJ_CNT, SUM(ZERO_INCOME_ADJ_CNT) AS ZERO_INCOME_ADJ_CNT,
SUM(INCOME_0_25_UNADJ_CNT) AS INCOME_0_25_UNADJ_CNT, SUM(INCOME_0_25_ADJ_CNT) AS INCOME_0_25_ADJ_CNT,
SUM(INCOME_25_50_UNADJ_CNT) AS INCOME_25_50_UNADJ_CNT, SUM(INCOME_25_50_ADJ_CNT) AS INCOME_25_50_ADJ_CNT,
SUM(INCOME_50_75_UNADJ_CNT) AS INCOME_50_75_UNADJ_CNT, SUM(INCOME_50_75_ADJ_CNT) AS INCOME_50_75_ADJ_CNT,
SUM(INCOME_75_100_UNADJ_CNT) AS INCOME_75_100_UNADJ_CNT, SUM(INCOME_75_100_ADJ_CNT) AS INCOME_75_100_ADJ_CNT,
SUM(INCOME_100_125_UNADJ_CNT) AS INCOME_100_125_UNADJ_CNT, SUM(INCOME_100_125_ADJ_CNT) AS INCOME_100_125_ADJ_CNT,
SUM(INCOME_125_150_UNADJ_CNT) AS INCOME_125_150_UNADJ_CNT, SUM(INCOME_125_150_ADJ_CNT) AS INCOME_125_150_ADJ_CNT,
SUM(INCOME_150_175_UNADJ_CNT) AS INCOME_150_175_UNADJ_CNT, SUM(INCOME_150_175_ADJ_CNT) AS INCOME_150_175_ADJ_CNT,
SUM(INCOME_GE_175_UNADJ_CNT) AS INCOME_GE_175_UNADJ_CNT, SUM(INCOME_GE_175_ADJ_CNT) AS INCOME_GE_175_ADJ_CNT,
SUM(TOT_UNADJ_CNT) AS TOT_UNADJ_CNT, SUM(TOT_ADJ_CNT) AS TOT_ADJ_CNT

FROM CARS_TMP_INCOME_POVERTY_AVG_THRESH;


DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_PCT_THRESH;
CREATE TEMPORARY TABLE CARS_TMP_INCOME_POVERTY_PCT_THRESH AS  
SELECT
ENTITY_ID, ENTITY_NAME,
ROUND((PROT_SRVC_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS PROT_SRVC_PCT,
ROUND((INVALID_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INVALID_PCT,
ROUND((ZERO_INCOME_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS ZERO_INCOME_PCT,
ROUND((INCOME_0_25_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_0_25_PCT,
ROUND((INCOME_25_50_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_25_50_PCT,
ROUND((INCOME_50_75_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_50_75_PCT,
ROUND((INCOME_75_100_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_75_100_PCT,
ROUND((INCOME_100_125_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_100_125_PCT,
ROUND((INCOME_125_150_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_125_150_PCT,
ROUND((INCOME_150_175_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_150_175_PCT,
ROUND((INCOME_GE_175_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_GE_175_PCT,
CASE WHEN PROT_SRVC_ADJ_CNT IS NULL THEN NULL ELSE 100.00 END AS TOT_PCT /* IF POOLING FACTOR IS NULL */
FROM CARS_TMP_INCOME_POVERTY_AVG_THRESH

UNION ALL 

SELECT
ENTITY_ID, ENTITY_NAME,
ROUND((PROT_SRVC_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS PROT_SRVC_PCT,
ROUND((INVALID_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INVALID_PCT,
ROUND((ZERO_INCOME_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS ZERO_INCOME_PCT,
ROUND((INCOME_0_25_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_0_25_PCT,
ROUND((INCOME_25_50_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_25_50_PCT,
ROUND((INCOME_50_75_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_50_75_PCT,
ROUND((INCOME_75_100_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_75_100_PCT,
ROUND((INCOME_100_125_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_100_125_PCT,
ROUND((INCOME_125_150_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_125_150_PCT,
ROUND((INCOME_150_175_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_150_175_PCT,
ROUND((INCOME_GE_175_ADJ_CNT / TOT_ADJ_CNT) * 100, 2) AS INCOME_GE_175_PCT,
100.00 AS TOT_PCT 
FROM CARS_TMP_INCOME_POVERTY_NATIONAL_THRESH;

INSERT INTO CARS_801_AGGN_INCOME_POVERTY_THRESH
(
AGGN_REF_ID,          
ENTITY_ID, 
ENTITY_NAME, 
INCOME_0_FAMILY_UNADJ_COUNT, 
INCOME_0_FAMILY_ADJ_COUNT, 
INCOME_0_FAMILY_PERCENT, 
INCOME_POVERTY_0_TO_25_FAMILY_UNADJ_COUNT, 
INCOME_POVERTY_0_TO_25_FAMILY_ADJ_COUNT, 
INCOME_POVERTY_0_TO_25_FAMILY_PERCENT, 
INCOME_POVERTY_25_TO_50_FAMILY_UNADJ_COUNT, 
INCOME_POVERTY_25_TO_50_FAMILY_ADJ_COUNT, 
INCOME_POVERTY_25_TO_50_FAMILY_PERCENT, 
INCOME_POVERTY_50_TO_75_FAMILY_UNADJ_COUNT, 
INCOME_POVERTY_50_TO_75_FAMILY_ADJ_COUNT, 
INCOME_POVERTY_50_TO_75_FAMILY_PERCENT, 
INCOME_POVERTY_75_TO_100_FAMILY_UNADJ_COUNT, 
INCOME_POVERTY_75_TO_100_FAMILY_ADJ_COUNT, 
INCOME_POVERTY_75_TO_100_FAMILY_PERCENT, 
INCOME_POVERTY_100_TO_125_FAMILY_UNADJ_COUNT, 
INCOME_POVERTY_100_TO_125_FAMILY_ADJ_COUNT, 
INCOME_POVERTY_100_TO_125_FAMILY_PERCENT, 
INCOME_POVERTY_125_TO_150_FAMILY_UNADJ_COUNT, 
INCOME_POVERTY_125_TO_150_FAMILY_ADJ_COUNT, 
INCOME_POVERY_125_TO_150_FAMILY_PERCENT, 
INCOME_POVERTY_150__TO_175_FAMILY_UNADJ_COUNT, 
INCOME_POVERTY_150__TO_175_FAMILY_ADJ_COUNT, 
INCOME_POVERTY_150__TO_175_FAMILY_PERCENT, 
INCOME_POVERTY_GE_175_FAMILY_UNADJ_COUNT, 
INCOME_POVERTY_GE_175_FAMILY_ADJ_COUNT, 
INCOME_POVERTY_GE_175_FAMILY_PERCENT, 
PROTECTIVE_SERVICES_FAMILY_UNADJ_COUNT,
PROTECTIVE_SERVICES_FAMILY_ADJ_COUNT,
PROTECTIVE_SERVICES_PERCENT, 
INVALID_FAMILY_UNADJ_COUNT, 
INVALID_FAMILY_ADJ_COUNT, 
INVALID_FAMILY_PERCENT, 
TOTAL_FAMILY_UNADJ_COUNT, 
TOTAL_FAMILY_ADJ_COUNT, 
TOTAL_FAMILY_PERCENT
)
SELECT
i_aggn_ref_id,
A.ENTITY_ID, 
A.ENTITY_NAME, 
ZERO_INCOME_UNADJ_CNT,
ZERO_INCOME_ADJ_CNT,
ZERO_INCOME_PCT,
INCOME_0_25_UNADJ_CNT,
INCOME_0_25_ADJ_CNT,
INCOME_0_25_PCT,
INCOME_25_50_UNADJ_CNT,
INCOME_25_50_ADJ_CNT,
INCOME_25_50_PCT,
INCOME_50_75_UNADJ_CNT,
INCOME_50_75_ADJ_CNT,
INCOME_50_75_PCT,
INCOME_75_100_UNADJ_CNT,
INCOME_75_100_ADJ_CNT,
INCOME_75_100_PCT,
INCOME_100_125_UNADJ_CNT,
INCOME_100_125_ADJ_CNT,
INCOME_100_125_PCT,
INCOME_125_150_UNADJ_CNT,
INCOME_125_150_ADJ_CNT,
INCOME_125_150_PCT,
INCOME_150_175_UNADJ_CNT,
INCOME_150_175_ADJ_CNT,
INCOME_150_175_PCT,
INCOME_GE_175_UNADJ_CNT,
INCOME_GE_175_ADJ_CNT,
INCOME_GE_175_PCT,
PROT_SRVC_UNADJ_CNT,
PROT_SRVC_ADJ_CNT,
PROT_SRVC_PCT,
INVALID_UNADJ_CNT,
INVALID_ADJ_CNT,
INVALID_PCT,
TOT_UNADJ_CNT,
TOT_ADJ_CNT,
TOT_PCT
FROM CARS_TMP_INCOME_POVERTY_AVG_THRESH A
JOIN CARS_TMP_INCOME_POVERTY_PCT_THRESH P
ON A.ENTITY_ID = P.ENTITY_ID

UNION ALL 

SELECT
i_aggn_ref_id,
A.ENTITY_ID, 
A.ENTITY_NAME, 
ZERO_INCOME_UNADJ_CNT,
ZERO_INCOME_ADJ_CNT,
ZERO_INCOME_PCT,
INCOME_0_25_UNADJ_CNT,
INCOME_0_25_ADJ_CNT,
INCOME_0_25_PCT,
INCOME_25_50_UNADJ_CNT,
INCOME_25_50_ADJ_CNT,
INCOME_25_50_PCT,
INCOME_50_75_UNADJ_CNT,
INCOME_50_75_ADJ_CNT,
INCOME_50_75_PCT,
INCOME_75_100_UNADJ_CNT,
INCOME_75_100_ADJ_CNT,
INCOME_75_100_PCT,
INCOME_100_125_UNADJ_CNT,
INCOME_100_125_ADJ_CNT,
INCOME_100_125_PCT,
INCOME_125_150_UNADJ_CNT,
INCOME_125_150_ADJ_CNT,
INCOME_125_150_PCT,
INCOME_150_175_UNADJ_CNT,
INCOME_150_175_ADJ_CNT,
INCOME_150_175_PCT,
INCOME_GE_175_UNADJ_CNT,
INCOME_GE_175_ADJ_CNT,
INCOME_GE_175_PCT,
PROT_SRVC_UNADJ_CNT,
PROT_SRVC_ADJ_CNT,
PROT_SRVC_PCT,
INVALID_UNADJ_CNT,
INVALID_ADJ_CNT,
INVALID_PCT,
TOT_UNADJ_CNT,
TOT_ADJ_CNT,
TOT_PCT
FROM CARS_TMP_INCOME_POVERTY_NATIONAL_THRESH A
JOIN CARS_TMP_INCOME_POVERTY_PCT_THRESH P
ON A.ENTITY_ID = P.ENTITY_ID

UNION ALL 

SELECT
i_aggn_ref_id, 
E.ENTITY_ID,
E.ENTITY_NAME,  
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL
FROM CARS_ENTITY E
LEFT OUTER JOIN CARS_TMP_INCOME_POVERTY_AVG_THRESH C
ON E.ENTITY_ID = C.ENTITY_ID
WHERE E.ENTITY_TYPE_CD = 'STATE-TER'
AND C.ENTITY_ID IS NULL 
;

		
		SET v_total_rows_inserted = ROW_COUNT();

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_UNADJ_DATA1_THRESH;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_INIT_THRESH;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_UNADJ_DATA_THRESH;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_ADJ_DATA_THRESH;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_AVG_THRESH;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_NATIONAL_THRESH;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_INCOME_POVERTY_PCT_THRESH;

UPDATE CARS_801_SP_LOG
SET SP_STATUS_TEXT= CONCAT('Success. Rows inserted: ',v_total_rows_inserted, ' Rows Deleted :', v_total_rows_deleted), END_TS=NOW()
WHERE  SP_LOG_ID=( SELECT MAX(SP_LOG_ID) FROM CARS_801_SP_LOG WHERE SP_NAME ='CARS_801_AGGN_SP_INCOME_POVERTY_THRESH');
COMMIT;		
	
END$$
DELIMITER ;