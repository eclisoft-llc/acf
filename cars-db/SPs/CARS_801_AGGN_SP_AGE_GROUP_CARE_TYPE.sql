DELIMITER $$
CREATE OR REPLACE PROCEDURE CARS_801_AGGN_SP_AGE_GROUP_CARE_TYPE( IN i_aggn_ref_id INT)
BEGIN

DECLARE v_rec_cnt INTEGER DEFAULT 0 ;
DECLARE v_total_rows_deleted INTEGER DEFAULT 0; 
DECLARE v_total_rows_inserted INTEGER DEFAULT 0; 
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
			SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
			 
			UPDATE CARS_801_SP_LOG
				SET SP_STATUS_TEXT='Error',SP_LOG_MESSAGE_TEXT=@full_error,END_TS=NOW()
			WHERE SP_LOG_ID=(SELECT MAX(SP_LOG_ID)FROM CARS_801_SP_LOG WHERE SP_NAME='CARS_801_AGGN_SP_AGE_GROUP_CARE_TYPE' );
			COMMIT;
		END;	
		
	INSERT INTO CARS_801_SP_LOG ( SP_NAME, START_TS)
		VALUES( 'CARS_801_AGGN_SP_AGE_GROUP_CARE_TYPE', NOW());	
	
		
		
	SELECT COUNT(*) INTO v_rec_cnt FROM CARS_801_AGGN_AGE_GROUP_CARE_TYPE WHERE  AGGN_REF_ID = i_aggn_ref_id;
 
		DELETE FROM CARS_801_AGGN_AGE_GROUP_CARE_TYPE
		WHERE AGGN_REF_ID = i_aggn_ref_id;
        
		SET v_total_rows_deleted = ROW_COUNT();


	DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_CATEGORIES_AGE;
	CREATE TEMPORARY TABLE CARS_TMP_406_CATEGORIES_AGE AS  
	SELECT 'Infants (0 to < 1 yr)' AS AGE_GROUP_TEXT
	UNION ALL 
	SELECT 'Toddlers (1 yr to <3 yrs)' AS AGE_GROUP_TEXT
	UNION ALL 
	SELECT 'Preschool (3 yrs to <6 yrs)' AS AGE_GROUP_TEXT
	UNION ALL 
	SELECT 'School Age (6 yrs to < 13 yrs)' AS AGE_GROUP_TEXT
	UNION ALL 
	SELECT '13 years and older' AS AGE_GROUP_TEXT
	UNION ALL 
	SELECT 'Age Invalid' AS AGE_GROUP_TEXT
	UNION ALL 
	SELECT 'Total' AS AGE_GROUP_TEXT
	;
	
	DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_REPROWS;
	CREATE TEMPORARY TABLE CARS_TMP_406_REPROWS AS 
	SELECT 
	E.ENTITY_ID, ENTITY_NAME, AGE_GROUP_TEXT
	FROM 
	(
	SELECT
	ENTITY_ID, ENTITY_NAME
	FROM CARS_ENTITY
	WHERE ENTITY_TYPE_CD = 'STATE-TER'
	/*UNION ALL
	SELECT 0 AS ENTITY_ID, 'National' AS ENTITY_NAME*/
	) E
	JOIN CARS_TMP_406_CATEGORIES_AGE A
	ON 1 = 1
	;
	
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INIT;
CREATE TEMPORARY TABLE CARS_TMP_406_INIT AS  
SELECT
    H.MODULE_HDR_ID, 
	H.ENTITY_NAME, 
	H.ENTITY_ID,
	F.POOLING_FACTOR,
	R.FISCAL_YEAR, 
	H.FAMILY_COUNT AS FAMILY_UNADJ_AVG_COUNT, 
	C.CHILD_COUNT,
	C.POP_SAM_CHILD_COUNT AS CHILD_UNADJ_COUNT,
	SR.POPULATION_SAMPLE_CODE
FROM CARS_MODULE_PERIOD_HDR H
JOIN CARS_PERIOD P
ON H.PERIOD_ID = P.PERIOD_ID
AND 801_FLAG = 1
JOIN CARS_801_AGGN_REF R
ON CAST(SUBSTR(P.PERIOD_DESC, 5, 4) AS INTEGER) = R.FISCAL_YEAR
AND R.AGGN_REF_ID = i_aggn_ref_id
JOIN CARS_801_REC_COUNTS C
ON H.MODULE_HDR_ID = C.MODULE_HDR_ID
JOIN VW_CARS_801_POOLING_FACTOR F
ON SUBSTR(P.PERIOD_DESC, 2, 7) = F.PERIOD_DESC
AND H.ENTITY_ID = F.ENTITY_ID
JOIN CARS_801_STATE_REF SR
ON H.ENTITY_ID = SR.ENTITY_ID
AND SUBSTR(P.PERIOD_DESC, 5, 4) = SR.FISCAL_YEAR
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_BASE;
CREATE TEMPORARY TABLE CARS_TMP_406_BASE AS  
SELECT
MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, CHILD_ID, SETTING_ID, CHILD_CARE_TYPE_CD, CHILD_CARE_HOURS, MONTHLY_AMOUNT, AGE_CALC, REP_YYYYMM, BIRTH_YYYYMM
FROM 
(
		SELECT H.MODULE_HDR_ID, H.ENTITY_ID, H.ENTITY_NAME, C.CHILD_ID, S.SETTING_ID, S.CHILD_CARE_TYPE_CD, S.CHILD_CARE_HOURS, S.MONTHLY_AMOUNT, C.BIRTH_YYYYMM, F.REP_YYYYMM,
		((SUBSTRING(F.REP_YYYYMM, 1, 4) * 12) + SUBSTRING(F.REP_YYYYMM,5,2)) - ((SUBSTRING(C.BIRTH_YYYYMM, 1, 4) * 12) + SUBSTRING(C.BIRTH_YYYYMM,5,2)) AS AGE_CALC
		FROM CARS_MODULE_PERIOD_HDR H
		JOIN CARS_PERIOD P
		ON H.PERIOD_ID = P.PERIOD_ID
		AND 801_FLAG = 1
		JOIN CARS_801_AGGN_REF R
		ON CAST(SUBSTR(P.PERIOD_DESC, 5, 4) AS INTEGER) = R.FISCAL_YEAR
		AND R.AGGN_REF_ID = i_aggn_ref_id
		JOIN CARS_801_REC_COUNTS RC
		ON H.MODULE_HDR_ID = RC.MODULE_HDR_ID
		JOIN CARS_801_FAMILY F
		ON H.MODULE_HDR_ID = F.MODULE_HDR_ID
		JOIN CARS_801_CHILD C
		ON H.MODULE_HDR_ID = C.MODULE_HDR_ID
		AND F.FAMILY_ID = C.FAMILY_ID
		JOIN CARS_801_SETTING S
		ON C.CHILD_ID = S.CHILD_ID
		AND H.MODULE_HDR_ID = S.MODULE_HDR_ID
) A
;


CREATE INDEX IX1 ON CARS_TMP_406_BASE (CHILD_ID);


DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INVALID;  	
CREATE TEMPORARY TABLE CARS_TMP_406_INVALID AS  
SELECT
DISTINCT MODULE_HDR_ID, ENTITY_NAME, ENTITY_ID, CHILD_ID, AGE_CALC
FROM 
(
		SELECT
		MODULE_HDR_ID, ENTITY_NAME, ENTITY_ID, CHILD_ID, AGE_CALC, REP_YYYYMM, BIRTH_YYYYMM,
		MAX(CASE WHEN CHILD_CARE_HOURS IS NULL THEN 1 ELSE 0 END) AS INVALID_CHILD_CARE_HOURS, MAX(CASE WHEN MONTHLY_AMOUNT IS NULL THEN 1 ELSE 0 END) AS INVALID_MONTHLY_AMOUNT,
		MAX(CASE WHEN CHILD_CARE_TYPE_CD IS NULL THEN 1 ELSE 0 END) AS INVALID_CARE_TYPE
		FROM CARS_TMP_406_BASE
		GROUP BY MODULE_HDR_ID, ENTITY_NAME, ENTITY_ID, CHILD_ID, AGE_CALC, REP_YYYYMM, BIRTH_YYYYMM
) A
WHERE INVALID_CHILD_CARE_HOURS = 1 OR INVALID_MONTHLY_AMOUNT = 1 OR INVALID_CARE_TYPE = 1
;


CREATE INDEX IX1 ON CARS_TMP_406_INVALID (CHILD_ID);


/*** DO THE INVALID CALCS ****/

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INVALID_CNT;  	
CREATE TEMPORARY TABLE CARS_TMP_406_INVALID_CNT AS  
SELECT
MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, 
CASE 
		WHEN AGE_CALC BETWEEN 0 AND 11 THEN 'Infants (0 to < 1 yr)'
		WHEN AGE_CALC BETWEEN 12 AND 35 THEN 'Toddlers (1 yr to <3 yrs)'
		WHEN AGE_CALC BETWEEN 36 AND 71 THEN 'Preschool (3 yrs to <6 yrs)'
		WHEN AGE_CALC BETWEEN 72 AND 155 THEN 'School Age (6 yrs to < 13 yrs)'
		WHEN AGE_CALC >= 156 THEN '13 years and older'
		ELSE 'Age Invalid' END AS AGE_GROUP_TEXT,
COUNT(*) AS INVALID_CHILD
FROM CARS_TMP_406_INVALID
GROUP BY 1,2,3,4
;


DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INVALID_UNADJ_DATA;
CREATE TEMPORARY TABLE CARS_TMP_406_INVALID_UNADJ_DATA AS  
SELECT
I.MODULE_HDR_ID, I.ENTITY_ID, I.ENTITY_NAME, AGE_GROUP_TEXT, I.POOLING_FACTOR,

CASE WHEN INVALID_CHILD IS NULL THEN 0
	 WHEN POPULATION_SAMPLE_CODE = 'S' THEN INVALID_CHILD / CHILD_COUNT * CHILD_UNADJ_COUNT 
	 ELSE INVALID_CHILD END AS INVALID_CHILD
FROM CARS_TMP_406_INIT I
LEFT OUTER JOIN CARS_TMP_406_INVALID_CNT A
ON A.MODULE_HDR_ID = I.MODULE_HDR_ID
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INVALID_ADJ_DATA;
CREATE TEMPORARY TABLE CARS_TMP_406_INVALID_ADJ_DATA AS  
SELECT
MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, AGE_GROUP_TEXT,
INVALID_CHILD * POOLING_FACTOR * .01 AS INVALID_CHILD
FROM CARS_TMP_406_INVALID_UNADJ_DATA
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INVALID_AVG;
CREATE TEMPORARY TABLE CARS_TMP_406_INVALID_AVG AS  
SELECT
A.ENTITY_ID, A.ENTITY_NAME, A.AGE_GROUP_TEXT, 
COALESCE(ROUND(INVALID_CHILD / MONTHS, 0), 0) AS INVALID_CHILD
FROM 
(
SELECT
A.ENTITY_ID, A.ENTITY_NAME, A.AGE_GROUP_TEXT, 
SUM(INVALID_CHILD) AS INVALID_CHILD
FROM CARS_TMP_406_INVALID_ADJ_DATA A
GROUP BY 1, 2, 3
) A
JOIN (SELECT ENTITY_ID, COUNT(*) AS MONTHS FROM CARS_TMP_406_INIT GROUP BY 1) I
ON A.ENTITY_ID = I.ENTITY_ID
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INVALID_AVG_AND_TOT;
CREATE TEMPORARY TABLE CARS_TMP_406_INVALID_AVG_AND_TOT AS  
SELECT
ENTITY_ID, ENTITY_NAME, AGE_GROUP_TEXT, 
INVALID_CHILD
FROM CARS_TMP_406_INVALID_AVG
UNION ALL 
SELECT
ENTITY_ID, ENTITY_NAME, 'Total',
SUM(INVALID_CHILD)
FROM CARS_TMP_406_INVALID_AVG
GROUP BY 1, 2, 3
;



/*** END OF INVALID CALCS ****/

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_VALID;
CREATE TEMPORARY TABLE CARS_TMP_406_VALID AS  
SELECT
B.MODULE_HDR_ID, B.ENTITY_ID, B.ENTITY_NAME, B.CHILD_ID, SETTING_ID, CHILD_CARE_TYPE_CD, CHILD_CARE_HOURS, MONTHLY_AMOUNT, B.AGE_CALC
FROM CARS_TMP_406_BASE B
LEFT OUTER JOIN CARS_TMP_406_INVALID I
ON B.CHILD_ID = I.CHILD_ID
WHERE I.CHILD_ID IS NULL
;

CREATE INDEX IX1 ON CARS_TMP_406_VALID (CHILD_ID);

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_FINAL_BASE;
CREATE TEMPORARY TABLE CARS_TMP_406_FINAL_BASE AS 
SELECT 
MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, C.CHILD_ID, SETTING_ID, CHILD_CARE_TYPE_CD, CHILD_CARE_HOURS, MONTHLY_AMOUNT, AGE_CALC,
ROUND(CHILD_CARE_HOURS / TOT_CHILD_CARE_HOURS, 2) AS CALC_CHILD_HRS_PCT
FROM 
(
	SELECT
	MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, CHILD_ID, SETTING_ID, CHILD_CARE_TYPE_CD, CHILD_CARE_HOURS, MONTHLY_AMOUNT, AGE_CALC
	FROM CARS_TMP_406_VALID
) C
JOIN 
(
	SELECT
	CHILD_ID, SUM(CHILD_CARE_HOURS) AS TOT_CHILD_CARE_HOURS
	FROM CARS_TMP_406_VALID
	GROUP BY CHILD_ID
) S
ON C.CHILD_ID = S.CHILD_ID
;


DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INTERIM;
CREATE TEMPORARY TABLE CARS_TMP_406_INTERIM AS 
SELECT 
MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, CHILD_ID, SETTING_ID, 
CASE 
		WHEN AGE_CALC BETWEEN 0 AND 11 THEN 'Infants (0 to < 1 yr)'
		WHEN AGE_CALC BETWEEN 12 AND 35 THEN 'Toddlers (1 yr to <3 yrs)'
		WHEN AGE_CALC BETWEEN 36 AND 71 THEN 'Preschool (3 yrs to <6 yrs)'
		WHEN AGE_CALC BETWEEN 72 AND 155 THEN 'School Age (6 yrs to < 13 yrs)'
		WHEN AGE_CALC >= 156 THEN '13 years and older'
		ELSE 'Age Invalid' END AS AGE_GROUP_TEXT,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (1,5,6) THEN CALC_CHILD_HRS_PCT ELSE NULL END AS CHILD_HOME,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (2,7,8) THEN CALC_CHILD_HRS_PCT ELSE NULL END AS FAMILY_HOME,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (3,9,10) THEN CALC_CHILD_HRS_PCT ELSE NULL END AS GROUP_HOME,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (4,11) THEN CALC_CHILD_HRS_PCT ELSE NULL END AS CENTER,
CASE WHEN CAST(CHILD_CARE_TYPE_CD AS INTEGER) IN (1,2,3,4,5,6,7,8,9,10,11) THEN CALC_CHILD_HRS_PCT ELSE NULL END AS ALL_CARE
FROM CARS_TMP_406_FINAL_BASE
;


DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406;
CREATE TEMPORARY TABLE CARS_TMP_406 AS 
SELECT
MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, AGE_GROUP_TEXT,
SUM(CHILD_HOME) AS CHILD_HOME,
SUM(FAMILY_HOME) AS FAMILY_HOME,
SUM(GROUP_HOME) AS GROUP_HOME,
SUM(CENTER) AS CENTER
FROM CARS_TMP_406_INTERIM
GROUP BY MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, AGE_GROUP_TEXT
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_UNADJ_DATA;
CREATE TEMPORARY TABLE CARS_TMP_406_UNADJ_DATA AS 
SELECT
A.MODULE_HDR_ID, A.ENTITY_ID, A.ENTITY_NAME, A.AGE_GROUP_TEXT, I.POOLING_FACTOR,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (CHILD_HOME / CHILD_COUNT) * CHILD_UNADJ_COUNT ELSE CHILD_HOME END AS CHILD_HOME,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (FAMILY_HOME / CHILD_COUNT) * CHILD_UNADJ_COUNT ELSE FAMILY_HOME END AS FAMILY_HOME,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (GROUP_HOME / CHILD_COUNT) * CHILD_UNADJ_COUNT ELSE GROUP_HOME END AS GROUP_HOME,
CASE WHEN POPULATION_SAMPLE_CODE = 'S' THEN (CENTER / CHILD_COUNT) * CHILD_UNADJ_COUNT ELSE CENTER END AS CENTER
FROM CARS_TMP_406 A
JOIN CARS_TMP_406_INIT I
ON A.MODULE_HDR_ID = I.MODULE_HDR_ID
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_ADJ_DATA;
CREATE TEMPORARY TABLE CARS_TMP_406_ADJ_DATA AS 
SELECT
MODULE_HDR_ID, ENTITY_ID, ENTITY_NAME, AGE_GROUP_TEXT,
CHILD_HOME * POOLING_FACTOR * .01 AS CHILD_HOME,
FAMILY_HOME * POOLING_FACTOR * .01 AS FAMILY_HOME,
GROUP_HOME * POOLING_FACTOR * .01 AS GROUP_HOME,
CENTER * POOLING_FACTOR * .01 AS CENTER
FROM CARS_TMP_406_UNADJ_DATA
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_AVG;
CREATE TEMPORARY TABLE CARS_TMP_406_AVG AS
SELECT
A.ENTITY_ID, A.ENTITY_NAME, A.AGE_GROUP_TEXT,
COALESCE(ROUND(CHILD_HOME / MONTHS, 0), 0) AS CHILD_HOME,
COALESCE(ROUND(FAMILY_HOME / MONTHS, 0), 0) AS FAMILY_HOME,
COALESCE(ROUND(GROUP_HOME / MONTHS, 0), 0) AS GROUP_HOME,
COALESCE(ROUND(CENTER / MONTHS, 0), 0) AS CENTER
FROM
(
SELECT
A.ENTITY_ID, A.ENTITY_NAME, A.AGE_GROUP_TEXT, 
SUM(CHILD_HOME) AS CHILD_HOME,
SUM(FAMILY_HOME) AS FAMILY_HOME,
SUM(GROUP_HOME) AS GROUP_HOME,
SUM(CENTER) AS CENTER
FROM CARS_TMP_406_ADJ_DATA A
GROUP BY 1, 2, 3
) A
JOIN (SELECT ENTITY_ID, COUNT(*) AS MONTHS FROM CARS_TMP_406_INIT GROUP BY 1) I
ON A.ENTITY_ID = I.ENTITY_ID
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_AVG_AND_TOT;
CREATE TEMPORARY TABLE CARS_TMP_406_AVG_AND_TOT AS 
SELECT
ENTITY_ID, ENTITY_NAME, AGE_GROUP_TEXT,
CHILD_HOME,
FAMILY_HOME, 
GROUP_HOME, 
CENTER
FROM CARS_TMP_406_AVG

UNION ALL 

SELECT
ENTITY_ID, ENTITY_NAME, 'Total',
SUM(CHILD_HOME) AS CHILD_HOME,
SUM(FAMILY_HOME) AS FAMILY_HOME,
SUM(GROUP_HOME) AS GROUP_HOME,
SUM(CENTER) AS CENTER
FROM CARS_TMP_406_AVG
GROUP BY 1, 2, 3
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_ALL;
CREATE TEMPORARY TABLE CARS_TMP_406_ALL AS 
SELECT
ENTITY_ID, ENTITY_NAME, AGE_GROUP_TEXT,
INVALID_CHILD, CHILD_HOME, FAMILY_HOME, GROUP_HOME, CENTER, 
INVALID_CHILD + CHILD_HOME + FAMILY_HOME + GROUP_HOME + CENTER AS TOTAL
FROM 
(
SELECT
R.ENTITY_ID, R.ENTITY_NAME, R.AGE_GROUP_TEXT,
CASE WHEN I.ENTITY_ID IS NULL THEN NULL ELSE COALESCE(N.INVALID_CHILD,0) END AS INVALID_CHILD,
CASE WHEN I.ENTITY_ID IS NULL THEN NULL ELSE COALESCE(A.CHILD_HOME,0) END AS CHILD_HOME,
CASE WHEN I.ENTITY_ID IS NULL THEN NULL ELSE COALESCE(A.FAMILY_HOME, 0) END AS FAMILY_HOME, 
CASE WHEN I.ENTITY_ID IS NULL THEN NULL ELSE COALESCE(A.GROUP_HOME,0) END AS GROUP_HOME, 
CASE WHEN I.ENTITY_ID IS NULL THEN NULL ELSE COALESCE(A.CENTER, 0) END AS CENTER
FROM CARS_TMP_406_REPROWS R
LEFT OUTER JOIN (SELECT DISTINCT ENTITY_ID FROM CARS_TMP_406_INIT) I
ON R.ENTITY_ID = I.ENTITY_ID
LEFT OUTER JOIN CARS_TMP_406_AVG_AND_TOT A
ON R.ENTITY_ID = A.ENTITY_ID
AND R.AGE_GROUP_TEXT = A.AGE_GROUP_TEXT
LEFT OUTER JOIN CARS_TMP_406_INVALID_AVG_AND_TOT N
ON R.ENTITY_ID = N.ENTITY_ID
AND R.AGE_GROUP_TEXT = N.AGE_GROUP_TEXT
) A
;


DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_PCT;
CREATE TEMPORARY TABLE CARS_TMP_406_PCT AS 
SELECT
A.ENTITY_ID, ENTITY_NAME, AGE_GROUP_TEXT,
INVALID_CHILD, CHILD_HOME, FAMILY_HOME, GROUP_HOME, CENTER, 
A.TOTAL,
ROUND(INVALID_CHILD / B.TOTAL * 100, 2) AS INVALID_PCT,
ROUND(CHILD_HOME / B.TOTAL * 100, 2) AS CHILD_HOME_PCT,
ROUND(FAMILY_HOME / B.TOTAL * 100, 2) AS FAMILY_HOME_PCT,
ROUND(GROUP_HOME / B.TOTAL * 100, 2) AS GROUP_HOME_PCT,
ROUND(CENTER / B.TOTAL * 100, 2) AS CENTER_PCT,
ROUND(A.TOTAL / B.TOTAL * 100, 2) AS TOTAL_PCT
FROM CARS_TMP_406_ALL A
JOIN (SELECT ENTITY_ID, TOTAL FROM CARS_TMP_406_ALL WHERE AGE_GROUP_TEXT = 'Total') B
ON A.ENTITY_ID = B.ENTITY_ID
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_NAT_ALL;
CREATE TEMPORARY TABLE CARS_TMP_406_NAT_ALL AS 
SELECT
0 AS ENTITY_ID, 'National' AS ENTITY_NAME, AGE_GROUP_TEXT, 
SUM(INVALID_CHILD) AS INVALID_CHILD,
SUM(CHILD_HOME) AS CHILD_HOME,
SUM(FAMILY_HOME) AS FAMILY_HOME,
SUM(GROUP_HOME) AS GROUP_HOME,
SUM(CENTER) AS CENTER,
SUM(TOTAL) AS TOTAL
FROM CARS_TMP_406_ALL
GROUP BY 1, 2, 3
;

DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_NAT_PCT;
CREATE TEMPORARY TABLE CARS_TMP_406_NAT_PCT AS 
SELECT
A.ENTITY_ID, ENTITY_NAME, AGE_GROUP_TEXT,
INVALID_CHILD, CHILD_HOME, FAMILY_HOME, GROUP_HOME, CENTER, 
A.TOTAL,
ROUND(INVALID_CHILD / B.TOTAL * 100, 2) AS INVALID_PCT,
ROUND(CHILD_HOME / B.TOTAL * 100, 2) AS CHILD_HOME_PCT,
ROUND(FAMILY_HOME / B.TOTAL * 100, 2) AS FAMILY_HOME_PCT,
ROUND(GROUP_HOME / B.TOTAL * 100, 2) AS GROUP_HOME_PCT,
ROUND(CENTER / B.TOTAL * 100, 2) AS CENTER_PCT,
ROUND(A.TOTAL / B.TOTAL * 100, 2) AS TOTAL_PCT
FROM CARS_TMP_406_NAT_ALL A
JOIN (SELECT ENTITY_ID, TOTAL FROM CARS_TMP_406_NAT_ALL WHERE AGE_GROUP_TEXT = 'Total') B
ON A.ENTITY_ID = B.ENTITY_ID
;

INSERT INTO CARS_801_AGGN_AGE_GROUP_CARE_TYPE 
(
AGGN_REF_ID, 
ENTITY_ID, 
AGE_GROUP_TEXT, 
ENTITY_NAME, 
INVALID_CHILD_COUNT, 
INVALID_PERCENT, 
CHILD_HOME_CHILD_COUNT, 
CHILD_HOME_PERCENT, 
FAMILY_HOME_CHILD_COUNT, 
FAMILY_HOME_PERCENT, 
GROUP_HOME_CHILD_COUNT, 
GROUP_HOME_PERCENT, 
CENTER_CHILD_COUNT, 
CENTER_PERCENT, 
TOTAL_CHILD_COUNT, 
TOTAL_PERCENT)
SELECT
i_aggn_ref_id,
ENTITY_ID, 
AGE_GROUP_TEXT,
ENTITY_NAME, 
INVALID_CHILD,
INVALID_PCT,
CHILD_HOME,
CHILD_HOME_PCT,
FAMILY_HOME,
FAMILY_HOME_PCT,
GROUP_HOME,
GROUP_HOME_PCT,
CENTER,
CENTER_PCT,
TOTAL,
TOTAL_PCT
FROM CARS_TMP_406_PCT

UNION ALL 

SELECT
i_aggn_ref_id,
ENTITY_ID, 
AGE_GROUP_TEXT,
ENTITY_NAME, 
INVALID_CHILD,
INVALID_PCT,
CHILD_HOME,
CHILD_HOME_PCT,
FAMILY_HOME,
FAMILY_HOME_PCT,
GROUP_HOME,
GROUP_HOME_PCT,
CENTER,
CENTER_PCT,
TOTAL,
TOTAL_PCT
FROM CARS_TMP_406_NAT_PCT
;

		SET v_total_rows_inserted = ROW_COUNT();


DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_CATEGORIES_AGE;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_BASE;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INVALID;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INIT;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INVALID_CNT;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INVALID_UNADJ_DATA;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INVALID_ADJ_DATA;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INVALID_AVG;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_VALID;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_FINAL_BASE;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INTERIM;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_UNADJ_DATA;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_ADJ_DATA;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_AVG;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_REPROWS;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_AVG_AND_TOT;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_INVALID_AVG_AND_TOT;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_ALL;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_NAT_ALL;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_PCT;
DROP TEMPORARY TABLE IF EXISTS CARS_TMP_406_NAT_PCT;


UPDATE CARS_801_SP_LOG
SET SP_STATUS_TEXT= CONCAT('Success. Rows inserted: ',v_total_rows_inserted, ' Rows Deleted :', v_total_rows_deleted), END_TS=NOW()
WHERE  SP_LOG_ID=( SELECT MAX(SP_LOG_ID) FROM CARS_801_SP_LOG WHERE SP_NAME ='CARS_801_AGGN_SP_AGE_GROUP_CARE_TYPE');
COMMIT;		
	
END$$
DELIMITER ;